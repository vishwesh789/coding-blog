{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"GraphQL is a powerful query language that allows developers to request exactly what they need from their API. It was developed by Facebook and has gained a lot of popularity in recent years due to its flexibility and efficiency. In this guide, we will explore how to integrate GraphQL into a React application.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Prerequisites\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we dive into GraphQL and React, there are a few prerequisites that you should have a good understanding of:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Basic knowledge of React\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Familiarity with Node.js and npm\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Basic knowledge of REST APIs\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you are already familiar with these concepts, then you are ready to start learning GraphQL in React.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is GraphQL?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"GraphQL is a query language for APIs that was developed by Facebook. It provides a more efficient, powerful, and flexible alternative to REST APIs. With GraphQL, you can request exactly what you need from your API, and the server will return only that data.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Why Use GraphQL in React?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React is a powerful JavaScript library for building user interfaces. However, when it comes to working with APIs, React has some limitations. One of the biggest limitations is that it requires a lot of boilerplate code to communicate with APIs. This is where GraphQL comes in. By using GraphQL, we can reduce the amount of boilerplate code and make our React applications more efficient.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Setting up a GraphQL Server\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we start integrating GraphQL into our React application, we need to set up a GraphQL server. There are many ways to set up a GraphQL server, but in this guide, we will be using Apollo Server.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Installing Apollo Server\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To install Apollo Server, run the following command in your terminal:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"npm install apollo-server\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Creating a Schema\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The first step in setting up our GraphQL server is to create a schema. A schema defines the types of data that can be queried from our API. In Apollo Server, schemas are defined using the GraphQL schema language.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a new file called \", _jsx(_components.strong, {\n        children: \"schema.js\"\n      }), \" in your project and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" gql \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"require\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'apollo-server'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" typeDefs \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" gql\", _jsxs(_components.span, {\n            className: \"token template-string\",\n            children: [_jsx(_components.span, {\n              className: \"token template-punctuation string\",\n              children: \"`\"\n            }), _jsx(_components.span, {\n              className: \"token graphql language-graphql\",\n              children: \"\\n\"\n            })]\n          })]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token template-string\",\n            children: _jsxs(_components.span, {\n              className: \"token graphql language-graphql\",\n              children: [\"  \", _jsx(_components.span, {\n                className: \"token keyword\",\n                children: \"type\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token class-name\",\n                children: \"Query\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"\\n\"]\n            })\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token template-string\",\n            children: _jsxs(_components.span, {\n              className: \"token graphql language-graphql\",\n              children: [\"    \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"hello\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \":\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token scalar\",\n                children: \"String\"\n              }), \"\\n\"]\n            })\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token template-string\",\n            children: _jsxs(_components.span, {\n              className: \"token graphql language-graphql\",\n              children: [\"  \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              }), \"\\n\"]\n            })\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token template-string\",\n            children: [_jsx(_components.span, {\n              className: \"token graphql language-graphql\"\n            }), _jsx(_components.span, {\n              className: \"token template-punctuation string\",\n              children: \"`\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"module\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"exports\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" typeDefs\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This defines a \", _jsx(_components.strong, {\n        children: \"Query\"\n      }), \" type with a single field called \", _jsx(_components.strong, {\n        children: \"hello\"\n      }), \" that returns a string.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Creating a Resolver\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The next step is to create a resolver. A resolver is a function that tells Apollo Server how to retrieve the data for a particular field.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a new file called \", _jsx(_components.strong, {\n        children: \"resolvers.js\"\n      }), \" in your project and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" resolvers \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"Query\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token function-variable function\",\n            children: \"hello\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Hello world!'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"module\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"exports\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" resolvers\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This defines a resolver for the \", _jsx(_components.strong, {\n        children: \"hello\"\n      }), \" field that returns the string \\\"Hello world!\\\".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Starting the Server\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that we have created our schema and resolver, we can start the Apollo Server. Create a new file called \", _jsx(_components.strong, {\n        children: \"server.js\"\n      }), \" and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"ApolloServer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"require\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'apollo-server'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" typeDefs \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"require\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'./schema'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" resolvers \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"require\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'./resolvers'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" server \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ApolloServer\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" typeDefs\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" resolvers \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"server\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"listen\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"then\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token parameter\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \" url \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token console class-name\",\n            children: \"console\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"log\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token template-string\",\n            children: [_jsx(_components.span, {\n              className: \"token template-punctuation string\",\n              children: \"`\"\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"🚀 Server ready at \"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token interpolation-punctuation punctuation\",\n                children: \"${\"\n              }), \"url\", _jsx(_components.span, {\n                className: \"token interpolation-punctuation punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token template-punctuation string\",\n              children: \"`\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This starts the Apollo Server and logs the URL where it is running.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Testing the Server\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To test the server, open your browser and navigate to the URL where the server is running. You should see the GraphQL Playground, which is a graphical user interface for testing GraphQL queries.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the left panel, type the following query:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"query \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  hello\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then, click the \\\"play\\\" button on the top left corner. You should see the following response in the right panel:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"data\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"hello\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Hello world!\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Congratulations! You have successfully set up a GraphQL server using Apollo Server.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Integrating GraphQL into a React Application\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have set up our GraphQL server, we can integrate it into our React application. There are many ways to integrate GraphQL into a React application, but in this guide, we will be using Apollo Client.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Installing Apollo Client\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To install Apollo Client, run the following command in your terminal:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"npm install @apollo\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"client\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Creating a Client\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The first step in integrating GraphQL into our React application is to create an Apollo Client. Create a new file called \", _jsx(_components.strong, {\n        children: \"client.js\"\n      }), \" and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"import\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token imports\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"ApolloClient\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"InMemoryCache\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"from\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'@apollo/client'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" client \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ApolloClient\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"uri\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'http://localhost:4000/'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"cache\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"InMemoryCache\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"export\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"default\"\n          }), \" client\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This creates a new Apollo Client that connects to our GraphQL server running on \", _jsx(_components.strong, {\n        children: \"http://localhost:4000/\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Querying Data\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The next step is to query data from our GraphQL server. In React, we can use the \", _jsx(_components.strong, {\n        children: \"useQuery\"\n      }), \" hook from Apollo Client to query data.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a new file called \", _jsx(_components.strong, {\n        children: \"App.js\"\n      }), \" and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"import\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token imports\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \" useQuery\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" gql \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"from\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'@apollo/client'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token constant\",\n            children: \"HELLO_QUERY\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" gql\", _jsxs(_components.span, {\n            className: \"token template-string\",\n            children: [_jsx(_components.span, {\n              className: \"token template-punctuation string\",\n              children: \"`\"\n            }), _jsx(_components.span, {\n              className: \"token graphql language-graphql\",\n              children: \"\\n\"\n            })]\n          })]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token template-string\",\n            children: _jsxs(_components.span, {\n              className: \"token graphql language-graphql\",\n              children: [\"  \", _jsx(_components.span, {\n                className: \"token keyword\",\n                children: \"query\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"\\n\"]\n            })\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token template-string\",\n            children: _jsxs(_components.span, {\n              className: \"token graphql language-graphql\",\n              children: [\"    \", _jsx(_components.span, {\n                className: \"token property\",\n                children: \"hello\"\n              }), \"\\n\"]\n            })\n          })\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: _jsx(_components.span, {\n            className: \"token template-string\",\n            children: _jsxs(_components.span, {\n              className: \"token graphql language-graphql\",\n              children: [\"  \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              }), \"\\n\"]\n            })\n          })\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token template-string\",\n            children: [_jsx(_components.span, {\n              className: \"token graphql language-graphql\"\n            }), _jsx(_components.span, {\n              className: \"token template-punctuation string\",\n              children: \"`\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"App\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" loading\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" error\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" data \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"useQuery\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token constant\",\n            children: \"HELLO_QUERY\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"loading\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"p\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Loading\"\n          }), _jsx(_components.span, {\n            className: \"token spread operator\",\n            children: \"...\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"p\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"error\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"p\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token known-class-name class-name\",\n            children: \"Error\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"p\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"p\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"hello\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"p\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"export\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"default\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"App\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code imports the \", _jsx(_components.strong, {\n        children: \"useQuery\"\n      }), \" hook and the \", _jsx(_components.strong, {\n        children: \"gql\"\n      }), \" function from Apollo Client. It also defines a GraphQL query called \", _jsx(_components.strong, {\n        children: \"HELLO_QUERY\"\n      }), \" that retrieves the \", _jsx(_components.strong, {\n        children: \"hello\"\n      }), \" field from our server. Finally, it uses the \", _jsx(_components.strong, {\n        children: \"useQuery\"\n      }), \" hook to execute the query and render the result.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Running the Application\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To run the application, start the GraphQL server by running the following command in your terminal:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"node server.js\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then, start the React application by running the following command in another terminal:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"npm start\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Open your browser and navigate to \", _jsx(_components.strong, {\n        children: \"http://localhost:3000/\"\n      }), \". You should see the message \\\"Hello world!\\\" rendered on the screen.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Congratulations! You have successfully integrated GraphQL into your React application using Apollo Client.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this guide, we have explored how to integrate GraphQL into a React application using Apollo Client. We have also learned how to set up a GraphQL server using Apollo Server. By using GraphQL, we can make our React applications more efficient and reduce the amount of boilerplate code required to communicate with APIs.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Getting Started with GraphQL in React: A Comprehensive Guide","metaDesc":"GraphQL is a powerful query language that allows developers to request exactly what they need from their API. It was developed by Facebook and has gained a lot of popularity in recent years due to its flexibility and efficiency. In this guide, we will explore how to integrate GraphQL into a React application.","tags":["GraphQL"],"slug":"getting-started-with-graph-ql-in-react-a-comprehensive-guide","readTime":"5","img":"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}