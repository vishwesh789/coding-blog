{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Serverless architecture has revolutionized the way we build and deploy applications. In this article, we will explore how to build serverless APIs with Node.js and AWS Lambda. We will cover the basics of serverless architecture and show you how to build a serverless API from scratch.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Serverless Architecture?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Serverless architecture is an approach to building and running applications and services without having to manage servers. Instead of managing servers, you can focus on writing and deploying your code. AWS Lambda is a popular serverless compute service that allows you to run code without provisioning or managing servers.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Benefits of Serverless Architecture\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Reduced operational costs: Serverless architecture eliminates the need for servers, which reduces the operational costs associated with managing and maintaining them.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Scalability: Serverless architecture allows for automatic scaling of resources as demand increases.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Increased developer productivity: Serverless architecture allows developers to focus on writing code instead of managing servers.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Increased reliability: Serverless architecture provides built-in fault tolerance and high availability.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Prerequisites\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we dive into building our serverless API, there are a few prerequisites we need to take care of:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Node.js and npm installed on your computer.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"An AWS account.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 1: Create an AWS Lambda Function\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The first step in building a serverless API with Node.js and AWS Lambda is to create a Lambda function. To do this, follow these steps:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Log in to your AWS account and navigate to the Lambda service.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Click on the \\\"Create function\\\" button.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Choose \\\"Author from scratch\\\" and provide a name for your function.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Choose \\\"Node.js\\\" as the runtime.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Leave the \\\"Permissions\\\" section as the default for now.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Click on the \\\"Create function\\\" button.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 2: Add Code to Your Lambda Function\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have created a Lambda function, we need to add some code to it. To do this, follow these steps:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Click on the \\\"Function code\\\" tab.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the \\\"Function code\\\" section, you will see the default code for a Node.js Lambda function.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Replace the default code with the following code:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"exports\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method-variable function-variable method function property-access\",\n            children: \"handler\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"event\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" response \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"statusCode\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"200\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"body\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token known-class-name class-name\",\n            children: \"JSON\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"stringify\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Hello from Lambda!'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Click on the \\\"Deploy\\\" button.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 3: Create an API Gateway\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have created a Lambda function and added some code to it, we need to create an API Gateway to expose our function as an API. To do this, follow these steps:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Click on the \\\"API Gateway\\\" icon in the \\\"Add triggers\\\" section.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Choose \\\"Create a new API\\\".\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Choose \\\"REST API\\\".\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Choose \\\"New API\\\".\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Provide a name for your API and click on the \\\"Create API\\\" button.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 4: Create a Resource and Method\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have created an API Gateway, we need to create a resource and a method. To do this, follow these steps:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Click on the \\\"Create Resource\\\" button.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Provide a name for your resource and click on the \\\"Create Resource\\\" button.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Click on the \\\"Create Method\\\" button.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Choose \\\"GET\\\" as the HTTP method.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Choose \\\"Lambda Function\\\" as the integration type.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Choose your Lambda function from the dropdown list.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Click on the \\\"Save\\\" button.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Click on the \\\"Deploy API\\\" button.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 5: Test Your API\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have created our serverless API, we need to test it to make sure it's working properly. To do this, follow these steps:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Click on the \\\"Stages\\\" tab in your API Gateway.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Click on the \\\"Invoke URL\\\" link to test your API.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You should see a message that says \\\"Hello from Lambda!\\\".\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Congratulations! You have successfully built a serverless API with Node.js and AWS Lambda.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we have explored how to build serverless APIs with Node.js and AWS Lambda. We covered the basics of serverless architecture, the benefits of using serverless architecture, and the steps required to build a serverless API from scratch.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Serverless architecture has many benefits, including reduced operational costs, automatic scaling, increased developer productivity, and increased reliability. By following the steps outlined in this article, you can easily build your own serverless API and take advantage of these benefits.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you're interested in learning more about serverless architecture, AWS Lambda, or Node.js, be sure to check out the AWS and Node.js documentation.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"How to Build Serverless APIs with Node.js and AWS Lambda","metaDesc":"Serverless architecture has revolutionized the way we build and deploy applications. In this article, we will explore how to build serverless APIs with Node.js and AWS Lambda. We will cover the basics of serverless architecture and show you how to build a serverless API from scratch.","tags":["node js"],"slug":"how-to-build-serverless-ap-is-with-node-js-and-aws-lambda","readTime":4,"img":"https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}