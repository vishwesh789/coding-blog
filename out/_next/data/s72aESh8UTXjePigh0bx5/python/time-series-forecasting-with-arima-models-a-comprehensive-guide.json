{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Time series forecasting is an important area of data science and machine learning that deals with predicting future values based on historical data. One of the most commonly used models for time series forecasting is the ARIMA (AutoRegressive Integrated Moving Average) model. In this guide, we will explore ARIMA models and how they can be used for time series forecasting.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Time Series Forecasting?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Time series forecasting is the process of predicting future values based on historical data. This is done by identifying patterns and trends in the data, and using them to make predictions about what will happen in the future. Time series forecasting is used in many different fields, including finance, economics, and marketing.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is an ARIMA Model?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An ARIMA model is a type of time series model that combines three components: Autoregression (AR), Integrated (I), and Moving Average (MA). These three components are combined to create a powerful model that can capture both short-term and long-term trends in the data.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Autoregression (AR)\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Autoregression refers to the use of past values of the variable to predict future values. In an AR model, the value of the variable at time t is predicted using a linear combination of the past p values of the variable. The order of the autoregression model is denoted by p.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Moving Average (MA)\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Moving Average refers to the use of past prediction errors to predict future values. In an MA model, the value of the variable at time t is predicted using a linear combination of the past q prediction errors. The order of the moving average model is denoted by q.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Integrated (I)\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Integrated refers to the use of differencing to make the time series stationary. Stationary time series have a constant mean and variance, and the properties of the time series do not change over time. Differencing is the process of subtracting each value in the time series from the previous value. The order of differencing is denoted by d.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"ARIMA Model\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An ARIMA model combines these three components into a single model. The notation for an ARIMA model is ARIMA(p, d, q), where p is the order of the autoregression, d is the order of differencing, and q is the order of the moving average.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"How to Build an ARIMA Model\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Building an ARIMA model involves several steps:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Load the time series data.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Check for stationarity.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Make the time series stationary (if necessary).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Determine the values of p, d, and q.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Fit the ARIMA model.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Make predictions.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Step 1: Load the Time Series Data\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The first step is to load the time series data into Python. The data can be loaded from a CSV file or from a database. The data should be in a format that can be easily parsed by Python, such as a Pandas DataFrame.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" pandas \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" pd\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" matplotlib\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pyplot \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" plt\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Load the time series data from a CSV file\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"data \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" pd\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"read_csv\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'data.csv'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" index_col\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'date'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" parse_dates\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"True\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Plot the time series data\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"plot\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"show\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Step 2: Check for Stationarity\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The second step is to check if the time series is stationary. A stationary time series has a constant mean and variance, and the properties of the time series do not change over time. There are several methods for checking for stationarity, including:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Plotting the rolling mean and rolling standard deviation.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Performing the Augmented Dickey-Fuller (ADF) test.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The rolling mean and rolling standard deviation can be computed using the Pandas \", _jsx(_components.strong, {\n        children: \"rolling\"\n      }), \" function.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Compute the rolling mean and rolling standard deviation\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"rolling_mean \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"rolling\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"window\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"12\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"mean\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"rolling_std \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"rolling\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"window\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"12\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"std\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Plot the time series data, rolling mean, and rolling standard deviation\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"plot\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" label\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Data'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"plot\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"rolling_mean\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" label\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Rolling Mean'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"plot\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"rolling_std\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" label\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Rolling Std'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"legend\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"show\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the rolling mean and rolling standard deviation are roughly constant over time, then the time series is stationary. Otherwise, the time series may need to be made stationary.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The ADF test is a statistical test that can be used to determine if a time series is stationary. The null hypothesis of the test is that the time series is non-stationary. If the p-value of the test is less than a chosen significance level (e.g., 0.05), then the null hypothesis is rejected and the time series is considered stationary.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" statsmodels\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"tsa\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"stattools \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" adfuller\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Perform the ADF test\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"result \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" adfuller\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'value'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Print the p-value\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'p-value:'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" result\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Step 3: Make the Time Series Stationary\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the time series is not stationary, then it may need to be made stationary. This can be done by taking first differences, second differences, or seasonal differences of the time series. The differenced time series can then be checked for stationarity using the methods described in Step 2.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Take the first difference of the time series\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"diff \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"diff\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"dropna\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Check for stationarity\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"rolling_mean \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" diff\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"rolling\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"window\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"12\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"mean\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"rolling_std \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" diff\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"rolling\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"window\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"12\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"std\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"result \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" adfuller\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"diff\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'value'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Plot the differenced time series, rolling mean, and rolling standard deviation\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"plot\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"diff\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" label\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Differenced Data'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"plot\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"rolling_mean\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" label\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Rolling Mean'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"plot\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"rolling_std\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" label\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Rolling Std'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"legend\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"show\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Print the p-value of the ADF test\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'p-value:'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" result\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Step 4: Determine the Values of p, d, and q\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The next step is to determine the values of p, d, and q for the ARIMA model. This can be done using the autocorrelation function (ACF) and partial autocorrelation function (PACF) plots.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The ACF plot shows the correlation between the time series and its lagged values. The PACF plot shows the correlation between the time series and its lagged values, after removing the effects of the intermediate lags.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" statsmodels\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"graphics\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"tsaplots \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" plot_acf\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" plot_pacf\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Plot the ACF and PACF plots\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plot_acf\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"diff\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" lags\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"20\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plot_pacf\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"diff\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" lags\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"20\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"show\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The values of p and q can be determined by looking at the lag at which the ACF and PACF plots cut off. The value of d is the order of differencing used to make the time series stationary.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Step 5: Fit the ARIMA Model\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The next step is to fit the ARIMA model using the \", _jsx(_components.strong, {\n        children: \"statsmodels\"\n      }), \" library in Python.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Fit the ARIMA model\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"model \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" ARIMA\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" order\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"p\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" d\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" q\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"results \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" model\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"fit\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Print the summary of the model\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"results\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"summary\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The output of the \", _jsx(_components.strong, {\n        children: \"summary()\"\n      }), \" function provides information about the model parameters, including the coefficient estimates, standard errors, t-values, and p-values.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Step 6: Make Predictions\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Once the ARIMA model has been fit, predictions can be made for future time points using the \", _jsx(_components.strong, {\n        children: \"predict()\"\n      }), \" function.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Make predictions for the next 12 time points\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"predictions \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" results\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"predict\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"start\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"len\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" end\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"len\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"11\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Plot the original time series data and the predicted values\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"plot\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" label\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Data'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"plot\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"predictions\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" label\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Predictions'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"legend\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"show\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we have discussed the basics of time series forecasting with ARIMA models. We covered the key steps involved in the process, including data preparation, stationarity testing, model parameter selection, model fitting, and prediction. ARIMA models are a powerful tool for time series forecasting, and with the right data and careful parameter selection, they can produce accurate and useful predictions.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Time Series Forecasting with ARIMA Models: A Comprehensive Guide","metaDesc":"Time series forecasting is an important area of data science and machine learning that deals with predicting future values based on historical data. One of the most commonly used models for time series forecasting is the ARIMA (AutoRegressive Integrated Moving Average) model. In this guide, we will explore ARIMA models and how they can be used for time series forecasting.\n\n","tags":["Time Series Forecasting with ARIMA Models"],"slug":"time-series-forecasting-with-arima-models-a-comprehensive-guide","readTime":6,"img":"https://images.pexels.com/photos/177598/pexels-photo-177598.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}