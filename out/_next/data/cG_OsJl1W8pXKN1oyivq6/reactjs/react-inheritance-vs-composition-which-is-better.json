{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"React is a popular JavaScript library that is widely used for building user interfaces. When working with React, developers often need to make decisions about how to structure their code. Two common approaches to structuring React components are inheritance and composition.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we'll explore the differences between inheritance and composition in React, and discuss the pros and cons of each approach. By the end of this article, you should have a better understanding of which approach is best for your specific use case.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Inheritance in React\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Inheritance is a programming concept where a class or component can inherit properties and methods from a parent class or component. In React, inheritance is typically achieved by using class components.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A class component can inherit properties and methods from its parent component using the \", _jsx(_components.strong, {\n        children: \"extends\"\n      }), \" keyword. For example, let's say we have a \", _jsx(_components.strong, {\n        children: \"ParentComponent\"\n      }), \" class:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ParentComponent\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"extends\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token class-name\",\n            children: [\"React\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \".\"\n            }), \"Component\"]\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"render\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"h1\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Hello\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" world\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"!\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"h1\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can then create a child component that inherits from the \", _jsx(_components.strong, {\n        children: \"ParentComponent\"\n      }), \" class:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ChildComponent\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ParentComponent\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"render\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"div\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"super\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"render\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"p\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"This\"\n          }), \" is a child component\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"p\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"div\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, the \", _jsx(_components.strong, {\n        children: \"ChildComponent\"\n      }), \" class inherits the \", _jsx(_components.strong, {\n        children: \"render\"\n      }), \" method from the \", _jsx(_components.strong, {\n        children: \"ParentComponent\"\n      }), \" class. It then overrides the \", _jsx(_components.strong, {\n        children: \"render\"\n      }), \" method to add additional content.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Pros of Inheritance\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the main benefits of inheritance in React is that it allows you to reuse code. If you have several components that share common functionality, you can create a parent component that contains that functionality and have your child components inherit from it.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Inheritance can also make your code easier to read and maintain. By grouping related functionality into a parent component, you can reduce the amount of code duplication in your application.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Cons of Inheritance\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the downsides of inheritance in React is that it can lead to tightly coupled components. If you have a complex hierarchy of components that inherit from each other, it can be difficult to make changes to one component without affecting all of its children.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Inheritance can also make it difficult to reason about the flow of data in your application. If you have a parent component that passes data down to its children, it can be difficult to track where that data is coming from and how it is being used.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Composition in React\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Composition is a programming concept where you combine smaller pieces of functionality to create larger, more complex functionality. In React, composition is typically achieved by using function components and props.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A function component is a simple JavaScript function that takes in props as an argument and returns a React element. For example, let's say we have a simple function component:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"HelloWorld\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"props\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"h1\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Hello\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"props\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"name\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"!\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"h1\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can then use this function component in another component by passing in props:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"Greeting\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"HelloWorld\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Alice\\\"\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, we're using composition to create a more complex component (\", _jsx(_components.strong, {\n        children: \"Greeting\"\n      }), \") by combining several smaller components (\", _jsx(_components.strong, {\n        children: \"HelloWorld\"\n      }), \").\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Pros of Composition\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the main benefits of composition in React is that it allows you to create reusable, composable components. By breaking down complex functionality into smaller, more manageable pieces, you can create components that are easier to reason about and maintain.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Composition can also make your code more flexible and extensible. Because you're combining smaller pieces of functionality, it's easier to add or remove functionality as needed.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Cons of Composition\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the downsides of composition in React is that it can lead to a larger number of components. Because you're breaking down complex functionality into smaller pieces, you may end up with a larger number of components to manage.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Composition can also make it harder to reason about the flow of data in your application. If you have a complex hierarchy of components that rely on props being passed down from parent components, it can be difficult to track where that data is coming from and how it is being used.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Which Approach is Better?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So, which approach is better: inheritance or composition? The answer is that it depends on your specific use case.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In general, composition is considered to be a more flexible and scalable approach to building React components. It allows you to create smaller, more reusable components that can be combined in different ways to create larger, more complex components.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"However, there are some situations where inheritance may be a better fit. For example, if you have a group of components that all share a common set of properties or methods, it may make sense to use inheritance to reduce code duplication.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ultimately, the best approach is to use a combination of both inheritance and composition where appropriate. By using a mix of class and function components, you can create a flexible and scalable React application that is easy to read and maintain.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we've explored the differences between inheritance and composition in React. We've discussed the pros and cons of each approach and looked at some examples of how they can be used.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When it comes down to it, the choice between inheritance and composition will depend on your specific use case. However, by understanding the benefits and drawbacks of each approach, you can make an informed decision about which approach is best for your React application.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"React Inheritance vs. Composition: Which is better?","metaDesc":"React is a popular JavaScript library used for building user interfaces. It has gained immense popularity because of its simplicity, flexibility, and performance. When it comes to building components in React, there are two popular approaches: Inheritance and Composition. In this article, we'll explore the differences between these two approaches and try to find out which one is better.","tags":["React Inheritance vs. Composition"],"slug":"react-inheritance-vs-composition-which-is-better","readTime":"5","img":"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}