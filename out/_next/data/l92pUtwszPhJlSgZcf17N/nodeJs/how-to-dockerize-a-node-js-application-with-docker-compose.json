{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Docker is a platform that allows you to run applications in containers. Containers are lightweight, portable, and self-contained, which makes them a great choice for deploying and running applications. Docker Compose is a tool that allows you to define and run multi-container Docker applications. In this article, we will explore how to use Docker Compose to Dockerize a Node.js application.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Prerequisites\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we start, make sure that you have the following installed on your system:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Docker\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Docker Compose\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Node.js\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you don't have Docker and Docker Compose installed, you can download them from the Docker website. Node.js can be downloaded from the official Node.js website.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 1: Create a Node.js application\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, let's create a simple Node.js application. Open your terminal and run the following commands:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"mkdir myapp\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"cd myapp\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"npm init\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will create a new directory called \", _jsx(_components.strong, {\n        children: \"myapp\"\n      }), \", navigate you into the directory, and initialize a new Node.js project.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next, let's create an \", _jsx(_components.strong, {\n        children: \"index.js\"\n      }), \" file and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" http \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"require\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'http'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" hostname \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'0.0.0.0'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" port \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3000\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" server \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" http\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"createServer\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token parameter\",\n            children: [\"req\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" res\"]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  res\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"statusCode\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"200\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  res\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"setHeader\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Content-Type'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'text/plain'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  res\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"end\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Hello World\\\\n'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"server\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"listen\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"port\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" hostname\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token console class-name\",\n            children: \"console\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"log\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token template-string\",\n            children: [_jsx(_components.span, {\n              className: \"token template-punctuation string\",\n              children: \"`\"\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"Server running at http://\"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token interpolation-punctuation punctuation\",\n                children: \"${\"\n              }), \"hostname\", _jsx(_components.span, {\n                className: \"token interpolation-punctuation punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \":\"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token interpolation-punctuation punctuation\",\n                children: \"${\"\n              }), \"port\", _jsx(_components.span, {\n                className: \"token interpolation-punctuation punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"/\"\n            }), _jsx(_components.span, {\n              className: \"token template-punctuation string\",\n              children: \"`\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This creates a simple HTTP server that listens on port \", _jsx(_components.strong, {\n        children: \"3000\"\n      }), \" and responds with \", _jsx(_components.strong, {\n        children: \"Hello World\"\n      }), \" when you visit \", _jsx(_components.strong, {\n        children: \"http://localhost:3000\"\n      }), \" in your web browser.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 2: Create a Dockerfile\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that we have a Node.js application, we need to create a Dockerfile to define how the application should be built and run in a container. Create a new file called \", _jsx(_components.strong, {\n        children: \"Dockerfile\"\n      }), \" in the root of your project directory and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"FROM node:14-alpine\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"WORKDIR /app\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"COPY package*.json ./\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"RUN npm install\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"COPY . .\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"EXPOSE 3000\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"CMD [\\\"npm\\\", \\\"start\\\"]\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's go through each line of the Dockerfile:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"FROM node:14-alpine\"\n        }), \" - This specifies the base image for our Docker image. We are using the official Node.js image with Alpine Linux as the base operating system.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"WORKDIR /app\"\n        }), \" - This sets the working directory inside the container to \", _jsx(_components.strong, {\n          children: \"/app\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"COPY package*.json ./\"\n        }), \" - This copies the \", _jsx(_components.strong, {\n          children: \"package.json\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"package-lock.json\"\n        }), \" files from our local directory to the \", _jsx(_components.strong, {\n          children: \"/app\"\n        }), \" directory inside the container.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"RUN npm install\"\n        }), \" - This runs the \", _jsx(_components.strong, {\n          children: \"npm install\"\n        }), \" command to install the dependencies defined in the \", _jsx(_components.strong, {\n          children: \"package.json\"\n        }), \" file.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"COPY . .\"\n        }), \" - This copies all the files from our local directory to the \", _jsx(_components.strong, {\n          children: \"/app\"\n        }), \" directory inside the container.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"EXPOSE 3000\"\n        }), \" - This exposes port \", _jsx(_components.strong, {\n          children: \"3000\"\n        }), \" inside the container.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"CMD [\\\"npm\\\", \\\"start\\\"]\"\n        }), \" - This runs the \", _jsx(_components.strong, {\n          children: \"npm start\"\n        }), \" command to start our Node.js application.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 3: Define a Docker Compose file\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have a Dockerfile, we can use Docker Compose to define how our application should be run in multiple containers.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a new file called \", _jsx(_components.strong, {\n        children: \"docker-compose.yml\"\n      }), \" in the root of your project directory and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"version: '3'\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"services:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  app:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    build: .\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    ports:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - '3000:3000'\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's go through each line of the Docker Compose file:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"version: '3'\"\n        }), \" - This specifies the version of Docker Compose that we are using.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"services:\"\n        }), \" - This defines the services that we want to run.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"app:\"\n        }), \" - This is the name of the service.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"build: .\"\n        }), \" - This tells Docker Compose to build the Docker image for our Node.js application using the \", _jsx(_components.strong, {\n          children: \"Dockerfile\"\n        }), \" in the current directory (\", _jsx(_components.strong, {\n          children: \".\"\n        }), \").\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"ports:\"\n        }), \" - This specifies the ports that we want to expose.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"- '3000:3000'\"\n        }), \" - This maps port \", _jsx(_components.strong, {\n          children: \"3000\"\n        }), \" on the host to port \", _jsx(_components.strong, {\n          children: \"3000\"\n        }), \" inside the container.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 4: Build and run the application with Docker Compose\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have defined our Docker Compose file, we can use it to build and run our Node.js application.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Open your terminal and navigate to the root of your project directory. Run the following command to build the Docker image and start the containers:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker-compose up --build\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will build the Docker image for your Node.js application and start the containers. Your Node.js application should now be running. Visit \", _jsx(_components.strong, {\n        children: \"http://localhost:3000\"\n      }), \" in your web browser to see the \", _jsx(_components.strong, {\n        children: \"Hello World\"\n      }), \" message.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Stopping the application\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To stop the application, press \", _jsx(_components.strong, {\n        children: \"Ctrl + C\"\n      }), \" in your terminal. This will stop the containers.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Alternatively, you can run the following command to stop the containers:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker-compose down\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we have explored how to use Docker Compose to Dockerize a Node.js application. We started by creating a simple Node.js application, then created a Dockerfile to define how the application should be built and run in a container. We then defined a Docker Compose file to define how our application should be run in multiple containers. Finally, we built and ran the application with Docker Compose.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Docker and Docker Compose are powerful tools that can make it much easier to deploy and manage applications. By Dockerizing your applications, you can ensure that they run consistently across different environments and are easily deployable to production.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"How to Dockerize a Node.js Application with Docker Compose","metaDesc":"Docker is a platform that allows you to run applications in containers. Containers are lightweight, portable, and self-contained, which makes them a great choice for deploying and running applications. Docker Compose is a tool that allows you to define and run multi-container Docker applications. In this article, we will explore how to use Docker Compose to Dockerize a Node.js application.","tags":["node js"],"slug":"how-to-dockerize-a-node-js-application-with-docker-compose","readTime":4,"img":"https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}