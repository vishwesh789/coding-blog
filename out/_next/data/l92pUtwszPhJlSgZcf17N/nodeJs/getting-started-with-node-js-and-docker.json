{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"If you're new to Node.js and Docker, you might be wondering where to start. Fortunately, the process of getting up and running with these two technologies is relatively straightforward, and can be accomplished with just a few simple steps. In this article, we'll walk through the basics of setting up a Node.js project in a Docker container.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Node.js?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we dive into Docker, it's important to understand what Node.js is and what it does. Node.js is an open-source, cross-platform JavaScript runtime environment that allows developers to run JavaScript code outside of a web browser. Node.js is often used to build web servers and other back-end applications, as it provides a fast and efficient way to handle server-side code.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Docker?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Docker, on the other hand, is a containerization platform that allows developers to package and deploy applications in isolated containers. Containers are lightweight, portable, and can be run on any system that supports Docker. This makes Docker an excellent choice for deploying Node.js applications, as it allows for easy deployment and scaling.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Setting up a Node.js project\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To get started with Node.js and Docker, you'll need to set up a Node.js project. The easiest way to do this is to use the Node.js command-line interface (CLI). To install the CLI, you'll need to first download and install Node.js on your machine.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once you have Node.js installed, open up a command prompt or terminal and navigate to the directory where you want to create your project. Then, run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"npm init\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will initialize a new Node.js project in the current directory. You'll be prompted to enter some basic information about your project, such as the name, version, and description. You can either accept the defaults or enter your own values.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Once the project is initialized, you can start adding code to it. To create a simple \\\"Hello, World!\\\" example, create a new file called \", _jsx(_components.strong, {\n        children: \"index.js\"\n      }), \" in the root directory of your project, and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token console class-name\",\n            children: \"console\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"log\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Hello, World!\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Save the file, and then run the following command to test your code:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"node index.js\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You should see the message \\\"Hello, World!\\\" printed to the console.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Creating a Dockerfile\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that you have a basic Node.js project set up, it's time to create a Dockerfile. A Dockerfile is a text file that contains instructions for building a Docker image. An image is a read-only template that contains a set of instructions for creating a Docker container.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To create a Dockerfile, create a new file in the root directory of your project called \", _jsx(_components.strong, {\n        children: \"Dockerfile\"\n      }), \". Open the file in your text editor of choice, and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"# \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Use\"\n          }), \" an official \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Node\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"js\"\n          }), \" runtime \", _jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"as\"\n          }), \" a parent image\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"FROM\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"node\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"14\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \"alpine\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"# \", _jsx(_components.span, {\n            className: \"token known-class-name class-name\",\n            children: \"Set\"\n          }), \" the working directory to \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"app\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"WORKDIR\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"app\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"# \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Copy\"\n          }), \" the current directory contents into the container at \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"app\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"COPY\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"app\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"# \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Install\"\n          }), \" any necessary dependencies\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"RUN\"\n          }), \" npm install\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"# \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Make\"\n          }), \" port \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3000\"\n          }), \" available to the world outside \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), \" container\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"EXPOSE\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3000\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"# \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Define\"\n          }), \" the command to run your app\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"CMD\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"npm\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"start\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This Dockerfile does a few things:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"It sets the base image to the official Node.js 14 Alpine image.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"It sets the working directory to \", _jsx(_components.strong, {\n          children: \"/app\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"It copies the contents of the current directory into the container at \", _jsx(_components.strong, {\n          children: \"/app\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"It installs any necessary dependencies using \", _jsx(_components.strong, {\n          children: \"npm install\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"It exposes port 3000 so that it can be accessed from outside the container.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"It sets the command to run your app to \", _jsx(_components.strong, {\n          children: \"npm start\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Building and running the Docker container\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With the Dockerfile in place, you're now ready to build and run the Docker container. To do this, open up a command prompt or terminal and navigate to the root directory of your project. Then, run the following command to build the Docker image:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker build -t my-node-app .\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This command tells Docker to build a new image based on the Dockerfile in the current directory, and tag it with the name \", _jsx(_components.strong, {\n        children: \"my-node-app\"\n      }), \". The \", _jsx(_components.strong, {\n        children: \".\"\n      }), \" at the end of the command tells Docker to look in the current directory for the Dockerfile.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once the image is built, you can run it using the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker run -p 3000:3000 my-node-app\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This command tells Docker to run a new container based on the \", _jsx(_components.strong, {\n        children: \"my-node-app\"\n      }), \" image, and map port 3000 in the container to port 3000 on your local machine. You should now be able to access your Node.js application by navigating to \", _jsx(_components.strong, {\n        children: \"http://localhost:3000\"\n      }), \" in your web browser.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And there you have it! In just a few simple steps, you've set up a Node.js project in a Docker container. While this is just the tip of the iceberg when it comes to working with Node.js and Docker, it should give you a good starting point for exploring these powerful technologies further. Happy coding!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Getting Started with Node.js and Docker","metaDesc":"If you're new to Node.js and Docker, you might be wondering where to start. Fortunately, the process of getting up and running with these two technologies is relatively straightforward, and can be accomplished with just a few simple steps. In this article, we'll walk through the basics of setting up a Node.js project in a Docker container.","tags":["node js"],"slug":"getting-started-with-node-js-and-docker","readTime":4,"img":"https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}