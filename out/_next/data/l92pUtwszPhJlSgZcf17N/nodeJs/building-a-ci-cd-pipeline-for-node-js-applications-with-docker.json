{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"If you're a developer, you probably know how important it is to have a good CI/CD pipeline for your code. A good CI/CD pipeline can save you time, increase your productivity, and ensure that your code is always of high quality. In this article, we're going to show you how to build a CI/CD pipeline for Node.js applications using Docker.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is a CI/CD Pipeline?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"CI/CD stands for Continuous Integration/Continuous Delivery or Continuous Deployment. It is a process that automates the building, testing, and deployment of code. A CI/CD pipeline ensures that the code is always of high quality, and that it can be deployed to production quickly and easily.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Why use Docker for CI/CD?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Docker is a powerful tool for building and deploying applications. It allows you to package your application and all its dependencies into a single container. This container can then be easily deployed to any environment, making it an ideal choice for building a CI/CD pipeline.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Setting up the Environment\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To get started, you'll need to set up your development environment. You'll need Node.js, Docker, and a code editor.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Installing Node.js\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you don't have Node.js installed, you can download it from the official website. Once you've downloaded and installed Node.js, you can verify that it's installed correctly by running the following command in your terminal:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"node --version\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Installing Docker\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To install Docker, you'll need to download it from the official website and follow the installation instructions for your operating system.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Setting up the Code Editor\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can use any code editor you like for this tutorial. Some popular choices include Visual Studio Code, Sublime Text, and Atom.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Creating a Node.js Application\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have our development environment set up, let's create a simple Node.js application. Create a new directory for your project, and navigate to it in your terminal. Once you're in the directory, run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"npm init\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This command will create a new \", _jsx(_components.strong, {\n        children: \"package.json\"\n      }), \" file in your directory. This file will contain information about your project, such as its name, version, and dependencies.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next, create a new file called \", _jsx(_components.strong, {\n        children: \"index.js\"\n      }), \" in your directory, and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const http = require('http');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const hostname = '0.0.0.0';\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const port = 3000;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const server = http.createServer((req, res) => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  res.statusCode = 200;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  res.setHeader('Content-Type', 'text/plain');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  res.end('Hello, World!\\\\n');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"});\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"server.listen(port, hostname, () => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  console.log(`Server running at http://${hostname}:${port}/`);\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"});\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This code will create a simple HTTP server that listens on port 3000 and returns a \\\"Hello, World!\\\" message to any request.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now let's test our application. In your terminal, run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"node index.js\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This command will start your application, and you should see the following message in your terminal:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Server running at http://0.0.0.0:3000/\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Open your web browser and navigate to \", _jsx(_components.strong, {\n        children: \"http://localhost:3000\"\n      }), \". You should see the \\\"Hello, World!\\\" message.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Creating a Dockerfile\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that we have our Node.js application, let's create a Dockerfile to package it into a Docker container. Create a new file called \", _jsx(_components.strong, {\n        children: \"Dockerfile\"\n      }), \" in your project directory, and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"FROM node:14-alpine\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"WORKDIR /app\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"COPY package*.json ./\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"RUN npm install\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"COPY . .\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"EXPOSE 3000\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"CMD [ \\\"node\\\", \\\"index.js\\\" ]\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This Dockerfile specifies that we want to use the \", _jsx(_components.strong, {\n        children: \"node:14-alpine\"\n      }), \" image as our base image. We then set the working directory to \", _jsx(_components.strong, {\n        children: \"/app\"\n      }), \", and copy the \", _jsx(_components.strong, {\n        children: \"package.json\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"package-lock.json\"\n      }), \" files to the working directory. We run \", _jsx(_components.strong, {\n        children: \"npm install\"\n      }), \" to install all the required dependencies.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We then copy all the remaining files in the project directory to the working directory in the Docker container. We expose port 3000 to allow incoming traffic, and set the command to run \", _jsx(_components.strong, {\n        children: \"node index.js\"\n      }), \" when the container starts.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Building the Docker Image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have our Dockerfile, we can build the Docker image. In your project directory, run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker build -t my-node-app .\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This command builds a Docker image with the tag \", _jsx(_components.strong, {\n        children: \"my-node-app\"\n      }), \" and uses the \", _jsx(_components.strong, {\n        children: \".\"\n      }), \" to specify the current directory as the build context.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once the build is complete, you can verify that the image was created by running the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker images\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You should see the \", _jsx(_components.strong, {\n        children: \"my-node-app\"\n      }), \" image in the list of images.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Testing the Docker Image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have built the Docker image, let's test it by running a container. In your terminal, run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker run -p 3000:3000 my-node-app\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This command runs a Docker container from the \", _jsx(_components.strong, {\n        children: \"my-node-app\"\n      }), \" image, and maps port 3000 on the host machine to port 3000 in the container.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Open your web browser and navigate to \", _jsx(_components.strong, {\n        children: \"http://localhost:3000\"\n      }), \". You should see the \\\"Hello, World!\\\" message.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Setting up a CI/CD Pipeline\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have our Dockerized Node.js application, let's set up a CI/CD pipeline for it. For this tutorial, we'll be using CircleCI as our CI/CD tool, but you can use any tool you like.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Setting up CircleCI\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To set up CircleCI, you'll need to create an account and link it to your GitHub repository. Once you've done that, you can create a new configuration file called \", _jsx(_components.strong, {\n        children: \".circleci/config.yml\"\n      }), \" in your repository, and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"version: 2\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"jobs:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  build:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    docker:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - image: circleci/node:14\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    working_directory: ~/app\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    steps:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - checkout\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - run: npm install\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - run: npm run test\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - save_cache:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"          key: dependency-cache-{{ checksum \\\"package.json\\\" }}\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"          paths:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"            - node_modules\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - run: npm run build\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - save_cache:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"          key: dependency-cache-{{ checksum \\\"package.json\\\" }}\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"          paths:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"            - node_modules\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - store_artifacts:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"          path: dist\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  deploy:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    docker:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - image: docker:20\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    working_directory: ~/app\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    steps:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - checkout\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - setup_remote_docker\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - run: |\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"          docker build -t my-node-app .\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"          docker tag my-node-app my-username/my-node-app:latest\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      - run: |\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"          echo \\\"$DOCKER_PASSWORD\\\" | docker login -u \\\"$DOCKER_USERNAME\\\" --password-stdin\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"          docker push my-username/my-node-app:latest\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This configuration file defines two jobs, \", _jsx(_components.strong, {\n        children: \"build\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"deploy\"\n      }), \". The \", _jsx(_components.strong, {\n        children: \"build\"\n      }), \" job uses the \", _jsx(_components.strong, {\n        children: \"circleci/node:14\"\n      }), \" Docker image as its base image, and runs the following steps:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"checkout\"\n        }), \": Check out the source code from the repository.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"npm install\"\n        }), \": Install the Node.js dependencies.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"npm run test\"\n        }), \": Run the tests.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"save_cache\"\n        }), \": Save the \", _jsx(_components.strong, {\n          children: \"node_modules\"\n        }), \" directory to the CircleCI cache, using the \", _jsx(_components.strong, {\n          children: \"package.json\"\n        }), \" file as the cache key.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"npm run build\"\n        }), \": Build the application.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"save_cache\"\n        }), \": Save the \", _jsx(_components.strong, {\n          children: \"node_modules\"\n        }), \" directory to the CircleCI cache again, in case any new dependencies were installed during the build.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"store_artifacts\"\n        }), \": Store the \", _jsx(_components.strong, {\n          children: \"dist\"\n        }), \" directory as a build artifact.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.strong, {\n        children: \"deploy\"\n      }), \" job uses the \", _jsx(_components.strong, {\n        children: \"docker:20\"\n      }), \" Docker image as its base image, and runs the following steps:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"checkout\"\n        }), \": Check out the source code from the repository.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"setup_remote_docker\"\n        }), \": Set up access to the Docker daemon on the CircleCI machine.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"docker build\"\n        }), \": Build the Docker image.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"docker tag\"\n        }), \": Tag the Docker image with a unique name based on your username and the image name.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"docker login\"\n        }), \": Log in to Docker Hub using your Docker Hub username and password.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"docker push\"\n        }), \": Push the Docker image to Docker Hub.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Adding Environment Variables\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To avoid hardcoding sensitive information like the Docker Hub username and password in the \", _jsx(_components.strong, {\n        children: \"config.yml\"\n      }), \" file, we can use CircleCI environment variables. To do this, go to your project settings on the CircleCI website, and click on \\\"Environment Variables\\\" in the sidebar. Add the following environment variables:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"DOCKER_USERNAME\"\n        }), \": Your Docker Hub username.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"DOCKER_PASSWORD\"\n        }), \": Your Docker Hub password.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Triggering the CI/CD Pipeline\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With CircleCI set up and the environment variables configured, the final step is to trigger the CI/CD pipeline. Push any changes to your GitHub repository, and CircleCI will automatically detect the changes and start the pipeline.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can view the progress of the pipeline on the CircleCI website, under the \\\"Jobs\\\" tab. If everything is configured correctly, you should see the pipeline complete successfully, and the Docker image should be pushed to Docker Hub.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we have seen how to set up a CI/CD pipeline for Node.js applications with Docker. We started by creating a Dockerfile to package the application in a container, and then used Docker Compose to set up a development environment. We then set up CircleCI to automatically build and deploy the application to Docker Hub whenever changes are pushed to the repository.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using a CI/CD pipeline has many benefits, including faster and more reliable releases, improved code quality, and reduced manual intervention. With Docker, we can easily package our applications into containers and deploy them consistently across different environments. And with CircleCI, we can automate the build and deployment process, saving time and reducing the risk of human error.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"While this article focused on Node.js applications, the concepts can be applied to other languages and frameworks as well. By following these best practices, you can improve the speed, quality, and reliability of your software development process, and ultimately deliver better software to your users.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Building a CI/CD Pipeline for Node.js Applications with Docker","metaDesc":"If you're a developer, you probably know how important it is to have a good CI/CD pipeline for your code. A good CI/CD pipeline can save you time, increase your productivity, and ensure that your code is always of high quality. In this article, we're going to show you how to build a CI/CD pipeline for Node.js applications using Docker.","tags":["node js"],"slug":"building-a-ci-cd-pipeline-for-node-js-applications-with-docker","readTime":7,"img":"https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}