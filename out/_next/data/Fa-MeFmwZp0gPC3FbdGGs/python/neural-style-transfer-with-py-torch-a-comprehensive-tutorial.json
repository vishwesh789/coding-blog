{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Are you a fan of digital art and wondering how you can create your own unique pieces? Neural style transfer is an exciting new technique that allows you to combine the content of one image with the style of another to create stunning artwork. In this tutorial, we will show you how to implement neural style transfer using PyTorch, a popular deep learning framework, and the VGG19 network, a pre-trained convolutional neural network.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"What is Neural Style Transfer?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Neural style transfer is a technique for generating new images that combine the content of one image with the style of another. It works by using a pre-trained neural network to extract the features of both the content and style images, and then combining those features to generate a new image that has the same content as the original image but with the style of the other image. The resulting image is a unique piece of art that blends the characteristics of the original images in a visually appealing way.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Getting Started with PyTorch\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we dive into the details of neural style transfer, let's first familiarize ourselves with PyTorch. PyTorch is a popular open-source deep learning framework that provides a simple and flexible way to build and train neural networks. It has a user-friendly interface that makes it easy to experiment with different models and architectures.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To get started with PyTorch, you can install it using pip:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Copy code\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"pip install torch torchvision\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once you have installed PyTorch, you can import it in your Python code:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" torch\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Preparing the Images\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To implement neural style transfer, we need two images: a content image and a style image. The content image is the image that we want to preserve the content of, and the style image is the image that we want to extract the style from. In this tutorial, we will use a picture of a city as the content image and a famous painting by Van Gogh as the style image.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" PIL \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" Image\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" torchvision \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" transforms\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Load the images\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"content_image \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" Image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"open\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"city.jpg\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"style_image \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" Image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"open\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"vangogh.jpg\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Define the transforms to apply to the images\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"transform \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" transforms\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Compose\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    transforms\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Resize\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"512\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    transforms\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"ToTensor\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    transforms\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Normalize\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"mean\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.485\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.456\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.406\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" std\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.229\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.224\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.225\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Apply the transforms to the images\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"content_tensor \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" transform\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"content_image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"unsqueeze\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"style_tensor \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" transform\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"style_image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"unsqueeze\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the code above, we load the content and style images using the PIL library, which is a popular library for image manipulation in Python. We then define a set of transforms to apply to the images, including resizing the images to 512x512 pixels, converting them to tensors, and normalizing the pixel values to have zero mean and unit variance. Finally, we apply the transforms to the images and convert them to tensors.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Defining the Content and Style Loss\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To implement neural style transfer, we need to define two loss functions: the content loss and the style loss. The content loss measures the difference between the features of the generated image and the content image, while the style loss measures the difference between the features of the generated image and the style image.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" torch\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"nn \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" nn\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Define the content loss\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"ContentLoss\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"nn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Module\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"__init__\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" target_feature\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"super\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"ContentLoss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"__init__\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"target \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" target_feature\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"detach\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"        \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"forward\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"input\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"loss \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" nn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"functional\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"mse_loss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"input\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"target\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"input\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the code above, we define the content loss as a custom PyTorch module. The \", _jsx(_components.strong, {\n        children: \"__init__\"\n      }), \" method takes as input the target feature, which is the feature of the content image that we want to preserve. We store the target feature as a class variable so that we can access it later. The \", _jsx(_components.strong, {\n        children: \"forward\"\n      }), \" method takes as input the feature of the generated image and computes the mean squared error (MSE) loss between the generated feature and the target feature. We store the loss as a class variable so that we can access it later.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Define the style loss\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"StyleLoss\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"nn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Module\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"__init__\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" target_feature\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"super\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"StyleLoss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"__init__\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"target \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" gram_matrix\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"target_feature\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"detach\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"        \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"forward\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"input\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        G \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" gram_matrix\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"input\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"loss \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" nn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"functional\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"mse_loss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"G\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" self\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"target\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"input\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the code above, we define the style loss as a custom PyTorch module. The \", _jsx(_components.strong, {\n        children: \"__init__\"\n      }), \" method takes as input the target feature, which is the feature of the style image that we want to match. We compute the Gram matrix of the target feature and store it as a class variable. The \", _jsx(_components.strong, {\n        children: \"forward\"\n      }), \" method takes as input the feature of the generated image and computes the Gram matrix of the feature. We then compute the MSE loss between the Gram matrix of the generated feature and the target Gram matrix. We store the loss as a class variable so that we can access it later.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Extracting Features with VGG19\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To compute the content and style loss, we need to extract the features of the content and style images using a pre-trained neural network. In this tutorial, we will use the VGG19 network, which is a deep convolutional neural network that is commonly used for image classification and feature extraction.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" torchvision\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"models \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" models\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Load the pre-trained VGG19 model\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"vgg \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" models\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"vgg19\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"pretrained\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"True\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"features\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Freeze all the model parameters\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" param \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" vgg\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"parameters\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    param\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"requires_grad_\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"False\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the code above, we load the pre-trained VGG19 model using the torchvision.models module. We then freeze all the parameters of the model so that we do not update them during training. We only want to update the parameters of the generated image.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"get_features\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" model\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" layers\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"None\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" layers \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"is\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"None\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        layers \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"0\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv1_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                  \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"5\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv2_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                  \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"10\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv3_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                  \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"19\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv4_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                  \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"28\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv5_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    features \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    x \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" image\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" layer \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"enumerate\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"model\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        x \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" layer\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"x\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"str\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" layers\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"layers\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"str\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" x\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"            \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" features\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the code above, we define a function to extract the features of an image using the pre-trained VGG19 model. The \", _jsx(_components.strong, {\n        children: \"get_features\"\n      }), \" function takes as input an image, a model, and a dictionary of layers that we want to extract features from. By default, we extract features from the first five convolutional layers of the model.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The function initializes an empty dictionary to store the features and then iterates over each layer of the model. For each layer, we apply the layer to the input image and store the output feature if the layer is one of the layers we want to extract features from. Finally, the function returns the dictionary of features.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Putting it all Together: Generating the Stylized Image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have defined the content and style loss and have a way to extract features from an image, we can put everything together to generate the stylized image.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"get_stylized_image\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"content_image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" style_image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" num_steps\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2000\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" style_weight\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"100000\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" content_weight\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Load the VGG19 model and freeze its parameters\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    vgg \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" models\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"vgg19\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"pretrained\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"True\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"features\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" param \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" vgg\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"parameters\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        param\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"requires_grad_\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"False\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"        \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Define the content and style layers\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    content_layers \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"4\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv1_2\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    style_layers \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"0\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv1_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                    \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"5\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv2_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                    \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"10\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv3_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                    \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"19\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv4_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                    \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"28\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv5_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Extract the features of the content and style images\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    content_features \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" get_features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"content_image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" vgg\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" content_layers\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    style_features \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" get_features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"style_image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" vgg\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" style_layers\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Initialize the generated image with random noise\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    input_image \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" torch\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"randn_like\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"content_image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"requires_grad_\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"True\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Define the optimizer and the loss\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    optimizer \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" torch\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"optim\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Adam\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"input_image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" lr\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.01\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    content_loss \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" ContentLoss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"content_features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv1_2\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    style_loss \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" StyleLoss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"style_features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv1_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Train the model\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" step \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"num_steps\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Compute the features of the generated image\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        input_features \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" get_features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"input_image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" vgg\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"        \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Compute the content and style loss\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        content_loss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"input_features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv1_2\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        style_loss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"input_features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv1_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" input_features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv2_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" input_features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv3_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" input_features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv4_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" input_features\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"conv5_1\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"        \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Compute the total loss\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        loss \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" content_weight \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" content_loss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"loss \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" style_weight \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" style_loss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"loss\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"        \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Update the generated image\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        optimizer\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"zero_grad\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        loss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"backward\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        optimizer\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"step\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"        \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Clamp the pixel values to the range [0, 1]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        input_image\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"clamp_\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"        \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" step \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"%\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"100\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Step [{}/{}]: Content Loss: {:.4f}, Style Loss: {:.4f}\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"format\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"step\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" num_steps\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" content_loss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"loss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"item\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" style_loss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"loss\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"item\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" input_image\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the code above, we define a function to generate the stylized image given a content image and a style image. The function takes as input the content image, the style image, the number of optimization steps to perform, the weight of the style loss, and the weight of the content loss.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The function first loads the VGG19 model and freezes its parameters. It then defines the layers to use for the content and style losses and extracts the features of the content and style images using the \", _jsx(_components.strong, {\n        children: \"get_features\"\n      }), \" function.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next, the function initializes the generated image with random noise and defines the optimizer and the content and style losses. We use the Adam optimizer with a learning rate of 0.01 to optimize the generated image.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The content loss is computed using the features of the content image at layer \", _jsx(_components.strong, {\n        children: \"conv1_2\"\n      }), \", which corresponds to the second convolutional layer of the VGG19 model.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The style loss is computed using the features of the style image at multiple layers of the VGG19 model. Specifically, we use the first convolutional layer (\", _jsx(_components.strong, {\n        children: \"conv1_1\"\n      }), \"), the first convolutional layer of the second block (\", _jsx(_components.strong, {\n        children: \"conv2_1\"\n      }), \"), the first convolutional layer of the third block (\", _jsx(_components.strong, {\n        children: \"conv3_1\"\n      }), \"), the first convolutional layer of the fourth block (\", _jsx(_components.strong, {\n        children: \"conv4_1\"\n      }), \"), and the first convolutional layer of the fifth block (\", _jsx(_components.strong, {\n        children: \"conv5_1\"\n      }), \"). These layers have been found to capture the style information of the image well.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Finally, the function performs the optimization to generate the stylized image. For each optimization step, we compute the features of the generated image using the \", _jsx(_components.strong, {\n        children: \"get_features\"\n      }), \" function and compute the content and style loss using the \", _jsx(_components.strong, {\n        children: \"ContentLoss\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"StyleLoss\"\n      }), \" classes. We then compute the total loss as a weighted sum of the content loss and the style loss and update the generated image using the optimizer.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At every 100th step, we print the content and style loss for monitoring the progress. After the specified number of steps, we return the generated image.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this tutorial, we have learned how to implement neural style transfer using PyTorch. We have discussed the theory behind neural style transfer, including the content loss and style loss, and shown how to implement these losses using PyTorch.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We have also shown how to extract features from an image using a pre-trained VGG19 model and how to use these features to compute the content and style losses. Finally, we have shown how to put everything together to generate a stylized image.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Neural style transfer is a powerful technique that can be used to create beautiful and artistic images. By changing the style image, we can create different stylized versions of the same content image. With the knowledge gained in this tutorial, you can experiment with different style images and explore the creative possibilities of neural style transfer.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Neural Style Transfer with PyTorch: A Comprehensive Tutorial","metaDesc":"Are you interested in creating your own digital artwork? Do you love the style of your favorite artists and want to replicate their techniques? Neural style transfer may be just the tool you need. In this tutorial, we will explore the basics of neural style transfer and demonstrate how to implement it using PyTorch, a popular deep learning framework.\n\n","tags":["PyTorch"],"slug":"neural-style-transfer-with-py-torch-a-comprehensive-tutorial","readTime":5,"img":"https://images.pexels.com/photos/4078342/pexels-photo-4078342.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}