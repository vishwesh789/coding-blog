{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Web scraping refers to the process of extracting data from websites. The data can be anything from text, images, and videos to product prices and customer reviews. Web scraping is an essential skill for anyone who wants to collect data from the internet for research or business purposes. Beautiful Soup is a Python library that is commonly used for web scraping. This article will provide a beginner's guide to web scraping with Beautiful Soup.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Beautiful Soup?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Beautiful Soup is a Python library that is used for web scraping purposes. It was created by Leonard Richardson in 2004. Beautiful Soup allows you to extract data from HTML and XML files. It is a flexible library that can be used for various web scraping tasks. Beautiful Soup makes it easy to parse and extract data from HTML and XML files. It is a powerful tool for web scraping, and it is widely used by developers and data scientists.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Installing Beautiful Soup\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we can start using Beautiful Soup, we need to install it. Beautiful Soup can be installed using pip, which is a package manager for Python. Open the terminal or command prompt and run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"pip install beautifulsoup4\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This command will install Beautiful Soup on your computer.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Scraping a Web Page with Beautiful Soup\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To scrape a web page with Beautiful Soup, we first need to download the HTML content of the web page. We can use the \", _jsx(_components.strong, {\n        children: \"requests\"\n      }), \" library in Python to download the content of a web page. Once we have the HTML content, we can use Beautiful Soup to extract the data we need.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of how to scrape the title and the first paragraph of a web page:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" requests\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" bs4 \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" BeautifulSoup\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"url \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'https://www.example.com'\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"response \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" requests\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"url\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"html_content \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"content\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"soup \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" BeautifulSoup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"html_content\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'html.parser'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"title \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" soup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"find\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'title'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get_text\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"first_paragraph \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" soup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"find\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'p'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get_text\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Title:'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" title\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'First Paragraph:'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" first_paragraph\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, we first import the \", _jsx(_components.strong, {\n        children: \"requests\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"BeautifulSoup\"\n      }), \" libraries. We then define the URL of the web page we want to scrape and use the \", _jsx(_components.strong, {\n        children: \"requests.get\"\n      }), \" function to download the HTML content of the web page. We then pass the HTML content to Beautiful Soup and use the \", _jsx(_components.strong, {\n        children: \"find\"\n      }), \" method to extract the title and the first paragraph of the web page.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Navigating the HTML Tree\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Beautiful Soup allows us to navigate the HTML tree and extract data based on HTML tags, attributes, and CSS classes. The HTML tree is a hierarchical structure that represents the structure of an HTML document. Each HTML tag represents a node in the tree.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of how to extract all the links from a web page:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" requests\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" bs4 \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" BeautifulSoup\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"url \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'https://www.example.com'\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"response \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" requests\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"url\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"html_content \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"content\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"soup \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" BeautifulSoup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"html_content\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'html.parser'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"links \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" soup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"find_all\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'a'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" link \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" links\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"link\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'href'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, we first download the HTML content of the web page using the \", _jsx(_components.strong, {\n        children: \"requests\"\n      }), \" library. We then pass the HTML content to Beautiful Soup and use the \", _jsx(_components.strong, {\n        children: \"find_all\"\n      }), \" method to extract all the links on the web page. We then loop through the links and print the URL of each link.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Filtering the HTML Tree\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sometimes we only want to extract data that meets certain criteria. For example, we may want to extract all the paragraphs on a web page that contain a certain keyword. Beautiful Soup allows us to filter the HTML tree based on different criteria.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of how to extract all the paragraphs on a web page that contain the word 'Python':\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" requests\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" bs4 \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" BeautifulSoup\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"url \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'https://www.example.com'\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"response \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" requests\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"url\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"html_content \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"content\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"soup \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" BeautifulSoup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"html_content\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'html.parser'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"paragraphs \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" soup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"find_all\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'p'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" string\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"lambda\"\n          }), \" text\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Python'\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" text\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" paragraph \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" paragraphs\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"paragraph\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get_text\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, we first download the HTML content of the web page using the \", _jsx(_components.strong, {\n        children: \"requests\"\n      }), \" library. We then pass the HTML content to Beautiful Soup and use the \", _jsx(_components.strong, {\n        children: \"find_all\"\n      }), \" method to extract all the paragraphs on the web page that contain the word 'Python'. We then loop through the paragraphs and print the text of each paragraph.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Handling Errors\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When scraping a web page, we may encounter errors such as HTTP errors or HTML parsing errors. To handle errors in our code, we can use Python's \", _jsx(_components.strong, {\n        children: \"try\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"except\"\n      }), \" statements.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of how to handle errors when downloading the HTML content of a web page:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" requests\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"url \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'https://www.example.com'\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"try\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    response \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" requests\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"url\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"raise_for_status\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"except\"\n          }), \" requests\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"exceptions\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"HTTPError \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" error\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f'HTTP error occurred: \"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"error\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"except\"\n          }), \" requests\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"exceptions\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"RequestException \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" error\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f'An error occurred: \"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"error\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, we use the \", _jsx(_components.strong, {\n        children: \"requests.get\"\n      }), \" function to download the HTML content of a web page. We then use the \", _jsx(_components.strong, {\n        children: \"raise_for_status\"\n      }), \" method to raise an exception if the HTTP status code of the response is not 200. We use \", _jsx(_components.strong, {\n        children: \"try\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"except\"\n      }), \" statements to catch HTTP errors and other types of errors.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Web scraping with Beautiful Soup is a powerful skill that can be used to extract data from websites. In this article, we provided a beginner's guide to web scraping with Beautiful Soup. We covered the basics of Beautiful Soup, including installing it, scraping a web page, navigating the HTML tree, filtering the HTML tree, and handling errors. With this knowledge, you can start scraping websites and extracting valuable data for your research or business purposes.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Web Scraping with Beautiful Soup: A Beginner's Guide","metaDesc":"Have you ever found yourself spending countless hours copying and pasting data from a website? Web scraping with Beautiful Soup can help you automate this tedious task and save you time. In this beginner's guide, we will walk you through the process of web scraping using Beautiful Soup.","tags":["Web Scraping with Beautiful Soup"],"slug":"web-scraping-with-beautiful-soup-a-beginner-s-guide","readTime":5,"img":"https://images.pexels.com/photos/1181655/pexels-photo-1181655.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}