{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Procedural generation is a technique used in game development to create game content automatically, rather than having developers create it manually. This approach can be used to generate levels, terrain, characters, and other elements of a game world. Procedural generation has become increasingly popular in recent years, as it can save developers a lot of time and effort and can also create more dynamic and interesting game content. In this article, we will explore how to use Python to implement procedural generation techniques in game development.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Procedural Generation?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Procedural generation is a technique used in computer graphics, art, and game development to generate content algorithmically rather than manually. It involves creating a set of rules or algorithms that can generate game content automatically. This approach can be used to generate a wide range of game content, such as terrain, levels, objects, and even characters.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Procedural generation has several advantages over traditional manual content creation. For example, it can save developers time and effort, as they don't need to manually create each individual element of a game world. Additionally, procedural generation can create more dynamic and interesting game content, as it can generate content that is different every time the game is played.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Procedural Generation Techniques in Game Development\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are many different procedural generation techniques that can be used in game development. In this section, we will explore some of the most common techniques.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Perlin Noise\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Perlin noise is a popular algorithm used in procedural generation that can be used to create realistic terrain and landscapes. It was first developed by Ken Perlin in 1983 and has since become a widely used technique in computer graphics and game development.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Perlin noise generates a random pattern of values that can be used to create natural-looking terrain. It works by generating a set of random gradients and interpolating between them to create a smooth noise pattern. The resulting noise can be used to create mountains, valleys, and other terrain features.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Cellular Automata\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cellular automata is another popular procedural generation technique that can be used to create game content. It involves dividing a game world into a grid of cells and applying a set of rules to each cell. The rules can be used to create patterns and structures that can be used in a game world.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cellular automata can be used to create a wide range of game content, such as terrain, levels, and even characters. It can be used to create natural-looking terrain features, such as rivers and forests, and can also be used to generate buildings and other structures.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"L-Systems\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"L-systems, or Lindenmayer systems, are a type of formal grammar used in procedural generation. They were developed by biologist Aristid Lindenmayer in 1968 and have since been used in computer graphics and game development.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"L-systems work by defining a set of rules for the growth and development of a system. These rules can be used to create a wide range of game content, such as plants, trees, and other organic structures.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Fractal Generation\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Fractal generation is a technique used in procedural generation that involves generating complex patterns using simple rules. It can be used to create a wide range of game content, such as terrain, clouds, and other natural phenomena.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Fractal generation works by applying a set of simple rules to a set of initial conditions. The rules are then repeated multiple times, with each repetition adding more complexity to the pattern. The resulting patterns can be used to create realistic terrain and other natural features.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Using Python for Procedural Generation\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Python is a powerful programming language that can be used for procedural generation in game development. There are several libraries and frameworks available that can be used to implement procedural generation techniques in Python . In this section, we will explore some of the most popular libraries and frameworks used for procedural generation in Python.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Pygame\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pygame is a Python library used for game development. It provides a set of modules for handling graphics, sound, and user input, making it a popular choice for creating 2D games.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pygame also provides support for procedural generation, with several modules available for generating game content. These modules include random number generation, noise generation, and image manipulation. Pygame's built-in support for procedural generation makes it a great choice for beginner game developers looking to get started with procedural content creation.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Arcade\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Arcade is another Python library used for game development. It provides a set of modules for handling graphics, sound, and user input, similar to Pygame. However, Arcade is designed to be more modern and easy to use than Pygame.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Arcade also provides support for procedural generation, with several modules available for generating game content. These modules include noise generation, random number generation, and L-system generation. Arcade's easy-to-use interface and built-in support for procedural generation make it a great choice for beginner game developers looking to create 2D games.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Blender\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Blender is a powerful open-source 3D modeling and animation software that can also be used for procedural generation. It provides a Python API that allows developers to automate tasks and create custom tools for procedural generation.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Blender's built-in support for procedural generation includes several tools for generating terrain, such as the ANT Landscape add-on, which can generate realistic terrain using noise and other procedural techniques. Blender's powerful 3D modeling tools and support for scripting make it a great choice for developers looking to create 3D games with procedurally generated content.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Getting Started with Procedural Generation in Python\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we've explored some of the most popular libraries and frameworks for procedural generation in Python, let's dive into some practical examples. In this section, we will explore how to implement some of the most common procedural generation techniques using Python.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Perlin Noise in Python\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To generate Perlin noise in Python, we can use the \", _jsx(_components.strong, {\n        children: \"noise\"\n      }), \" library. This library provides several functions for generating Perlin noise, including 1D, 2D, and 3D noise.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here's an example of generating 2D Perlin noise using the \", _jsx(_components.strong, {\n        children: \"noise\"\n      }), \" library in Python:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" noise\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Generate a 2D Perlin noise map\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"size \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"256\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"scale \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"100.0\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"octaves \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"6\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"persistence \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.5\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"lacunarity \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2.0\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"world_map \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" size \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" _ \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" j \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        x \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \" size \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" scale\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        y \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" j \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \" size \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" scale\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        world_map\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"i\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"j\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" noise\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pnoise2\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"x\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" octaves\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \"octaves\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" persistence\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \"persistence\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" lacunarity\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \"lacunarity\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" repeatx\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1024\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" repeaty\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1024\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" base\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Display the Perlin noise map using Pygame\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" pygame\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"init\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"screen \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"display\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"set_mode\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" j \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        color \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"int\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"world_map\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"i\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"j\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"255\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"draw\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"rect\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"screen\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"i\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" j\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"display\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"flip\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"while\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"True\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" event \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"event\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" event\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"type\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"QUIT\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"quit\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            sys\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"exit\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code generates a 2D Perlin noise map using the \", _jsx(_components.strong, {\n        children: \"noise\"\n      }), \" library and displays it using Pygame.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Cellular Automata in Python\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Cellular automata are a popular technique for generating game content, particularly for creating terrain and other natural features. In Python, we can use the \", _jsx(_components.strong, {\n        children: \"numpy\"\n      }), \" library to implement cellular automata.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here's an example of generating a terrain using cellular automata in Python:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" numpy \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" np\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" random\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Set the size of the terrain\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"size \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"256\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"256\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Set the initial terrain state to random values\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"terrain \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" np\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"zeros\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" j \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        terrain\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"i\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"j\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" random\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"randint\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Define the cellular automata rules\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"cellular_automata_step\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"terrain\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    new_terrain \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" np\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"zeros\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" j \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            neighbors \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" terrain\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"i\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"i\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" j\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"j\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" np\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"sum\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"neighbors\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"5\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"                new_terrain\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"i\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"j\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" new_terrain\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Apply the cellular automata rules\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"10\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    terrain \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" cellular_automata_step\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"terrain\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Display the terrain using Pygame\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" pygame\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"init\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"screen \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"display\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"set_mode\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" j \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"size\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        color \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"int\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"terrain\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"i\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"j\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"255\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"draw\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"rect\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"screen\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"i\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" j\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"display\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"flip\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"while\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"True\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" event \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"event\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" event\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"type\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"QUIT\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            pygame\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"quit\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            sys\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"exit\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This code generates a terrain using cellular automata and displays it using Pygame.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"L-System in Python\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"L-System is a technique for generating complex patterns using a set of simple rules. In Python, we can use the \", _jsx(_components.strong, {\n        children: \"turtle\"\n      }), \" library to visualize L-System patterns.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here's an example of generating an L-System pattern using Python:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" turtle\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Define the L-System rules\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"rules \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"F\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"F-G+F+G-F\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"G\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"GG\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Set the initial L-System state and depth\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"state \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"F-G-G\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"depth \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"4\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Apply the L-System rules\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" _ \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"depth\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    new_state \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" char \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" state\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" char \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" rules\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            new_state \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+=\"\n          }), \" rules\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"char\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"else\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            new_state \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+=\"\n          }), \" char\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    state \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" new_state\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Visualize the L-System pattern using turtle\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"turtle\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"speed\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" char \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" state\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" char \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"F\\\"\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"or\"\n          }), \" char \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"G\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        turtle\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"forward\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"5\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"elif\"\n          }), \" char \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"+\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        turtle\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"right\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"120\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"elif\"\n          }), \" char \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"==\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"-\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        turtle\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"left\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"120\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"turtle\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"exitonclick\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This code generates an L-System pattern and visualizes it using turtle.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Further Reading\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you're interested in learning more about procedural generation in games, here are some resources to get you started:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://www.gamasutra.com/blogs/SebastianLague/20150807/250646/Procedural_Generation_in_Game_Design.php\",\n          children: \"Procedural Generation in Game Design\"\n        }), \" by Sebastian Lague\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://pcg.wikidot.com/\",\n          children: \"Procedural Generation Wiki\"\n        }), \" - a comprehensive wiki on procedural generation\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://natureofcode.com/book/chapter-8-fractals/\",\n          children: \"The Nature of Code\"\n        }), \" - a free online book that covers procedural generation in detail, including Perlin noise and L-System\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://itch.io/jam/procjam\",\n          children: \"ProcJam\"\n        }), \" - an annual game jam focused on procedural generation\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://www.pygame.org/docs/\",\n          children: \"Pygame Documentation\"\n        }), \" - the official documentation for Pygame\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Final Thoughts\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Procedural generation is a powerful tool for game developers, allowing them to create vast and varied worlds with relatively little effort. In this article, we've explored the basics of procedural generation in games and how to implement it using Python, as well as practical examples of generating content using Perlin noise, cellular automata, and L-System.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By learning the techniques and libraries covered in this article, you'll be well on your way to creating your own procedurally generated games and game content. So why not give it a try? Who knows what amazing creations you'll come up with!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Procedural Generation of Game Content with Python: A Comprehensive Guide","metaDesc":"Procedural generation is a technique used in game development to create game content automatically, rather than having developers create it manually. This approach can be used to generate levels, terrain, characters, and other elements of a game world. Procedural generation has become increasingly popular in recent years, as it can save developers a lot of time and effort and can also create more dynamic and interesting game content. In this article, we will explore how to use Python to implement procedural generation techniques in game development.","tags":["Procedural Generation of Game Content"],"slug":"procedural-generation-of-game-content-with-python-a-comprehensive-guide","readTime":8,"img":"https://images.pexels.com/photos/5380651/pexels-photo-5380651.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}