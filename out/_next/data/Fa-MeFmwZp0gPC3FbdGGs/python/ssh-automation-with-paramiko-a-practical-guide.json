{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Are you tired of manually logging in to remote servers and performing routine tasks? SSH automation can save you a lot of time and effort by automating these tasks. In this guide, we will explore how to use Paramiko, a Python library, to automate SSH tasks.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Paramiko?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Paramiko is a Python library that allows you to interact with SSH servers. It provides an easy-to-use interface for logging in, executing commands, transferring files, and managing SSH keys. Paramiko supports both SSHv2 and SFTP protocols, making it a versatile tool for automation.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Installing Paramiko\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we can use Paramiko, we need to install it. You can install Paramiko using pip, the Python package manager. Open a terminal window and type the following command:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Copy code\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"pip install paramiko\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Connecting to an SSH Server\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To connect to an SSH server using Paramiko, we first need to create a SSH client object. We can do this by importing the SSHClient class and creating an instance of it:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" paramiko\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"ssh \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" paramiko\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"SSHClient\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By default, Paramiko does not trust any SSH server. Therefore, we need to enable host key checking to ensure that we are connecting to a trusted server. We can do this by calling the set_missing_host_key_policy method on the SSH client object:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"ssh\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"set_missing_host_key_policy\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"paramiko\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"AutoAddPolicy\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have set the host key policy, we can connect to the SSH server by calling the connect method on the SSH client object:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"ssh\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"connect\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'example.com'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" username\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'myuser'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" password\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'mypassword'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Replace \", _jsx(_components.strong, {\n        children: \"example.com\"\n      }), \" with the hostname or IP address of the SSH server, \", _jsx(_components.strong, {\n        children: \"myuser\"\n      }), \" with your username, and \", _jsx(_components.strong, {\n        children: \"mypassword\"\n      }), \" with your password.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you want to connect using an SSH key instead of a password, you can use the following code:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"ssh\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"connect\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'example.com'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" username\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'myuser'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" key_filename\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'/path/to/keyfile'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Replace \", _jsx(_components.strong, {\n        children: \"/path/to/keyfile\"\n      }), \" with the path to your SSH private key.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Executing Commands\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we are connected to the SSH server, we can execute commands on it using the exec_command method:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"stdin\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" stdout\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" stderr \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" ssh\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"exec_command\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'ls'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"stdout\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"read\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"decode\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code executes the \", _jsx(_components.strong, {\n        children: \"ls\"\n      }), \" command on the remote server and prints the output to the console. The \", _jsx(_components.strong, {\n        children: \"exec_command\"\n      }), \" method returns three file-like objects: \", _jsx(_components.strong, {\n        children: \"stdin\"\n      }), \", \", _jsx(_components.strong, {\n        children: \"stdout\"\n      }), \", and \", _jsx(_components.strong, {\n        children: \"stderr\"\n      }), \". We can read the output of the command by calling the \", _jsx(_components.strong, {\n        children: \"read\"\n      }), \" method on the \", _jsx(_components.strong, {\n        children: \"stdout\"\n      }), \" object.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can also execute multiple commands in a single SSH session by creating a shell object and sending commands to it:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"shell \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" ssh\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"invoke_shell\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"shell\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"send\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'ls\\\\n'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"shell\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"send\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'pwd\\\\n'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"shell\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"send\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'whoami\\\\n'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"output \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" shell\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"recv\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"65535\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"decode\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"output\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code opens an interactive shell on the remote server and sends three commands to it. We can read the output of the commands by calling the \", _jsx(_components.strong, {\n        children: \"recv\"\n      }), \" method on the shell object.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Transferring Files\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Paramiko also allows us to transfer files between the local machine and the remote server using the SFTP protocol. To transfer a file, we first need to create an SFTP client object:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"sftp \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" ssh\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"open_sftp\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can then use the \", _jsx(_components.strong, {\n        children: \"put\"\n      }), \" method to upload a file from the local machine to the remote server:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"sftp\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"put\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'/path/to/local/file'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'/path/to/remote/file'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Replace \", _jsx(_components.strong, {\n        children: \"/path/to/local/file\"\n      }), \" with the path to the local file you want to upload, and \", _jsx(_components.strong, {\n        children: \"/path/to/remote/file\"\n      }), \" with the path to the remote file you want to create.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similarly, we can use the \", _jsx(_components.strong, {\n        children: \"get\"\n      }), \" method to download a file from the remote server to the local machine:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"sftp\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'/path/to/remote/file'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'/path/to/local/file'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Replace \", _jsx(_components.strong, {\n        children: \"/path/to/remote/file\"\n      }), \" with the path to the remote file you want to download, and \", _jsx(_components.strong, {\n        children: \"/path/to/local/file\"\n      }), \" with the path to the local file you want to create.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Closing the Connection\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once we are done with the SSH session, we should close the connection to the server:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"ssh\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"close\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This ensures that we do not leave any open connections, which could potentially be a security risk.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this guide, we have seen how to use Paramiko, a Python library, to automate SSH tasks. We have covered connecting to an SSH server, executing commands, transferring files, and closing the connection. With these tools, you can automate routine tasks and save a lot of time and effort. Happy automating!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"SSH Automation with Paramiko: A Practical Guide","metaDesc":"Are you tired of manually connecting to remote servers using SSH to run commands or transfer files? Do you want to automate these tasks to save time and improve efficiency? Look no further than Paramiko, a Python module that allows you to automate SSH connections.\n\nIn this guide, we will cover the basics of Paramiko and demonstrate how to use it for SSH automation. We assume that you have some basic knowledge of Python and SSH.","tags":["SSH Automation with Paramiko"],"slug":"ssh-automation-with-paramiko-a-practical-guide","readTime":4,"img":"https://images.pexels.com/photos/4439901/pexels-photo-4439901.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}