{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"In this tutorial, we will be building a TCP chat server using Python's built-in socket library. This tutorial is designed for beginners who want to learn how to build a simple chat server using Python.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is a TCP Chat Server?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A TCP chat server is a server that allows multiple clients to connect to it and communicate with each other using the Transmission Control Protocol (TCP). TCP is a reliable, connection-oriented protocol that guarantees the delivery of data between two endpoints.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In a TCP chat server, clients connect to the server using a client application, and then send and receive messages to and from other clients connected to the server. The server acts as a mediator, receiving messages from clients and sending them to other clients.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Getting Started\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we dive into the code, let's make sure we have all the necessary tools installed. For this tutorial, we will be using Python 3.x and a text editor of your choice.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Installing Python\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you don't have Python installed on your computer, you can download it from the official Python website. Make sure to download the latest version of Python 3.x for your operating system.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Choosing a Text Editor\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can use any text editor to write Python code, but we recommend using a text editor specifically designed for coding. Some popular choices include Visual Studio Code, Sublime Text, and Atom.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Setting up the Server\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's start by creating a new Python file and importing the necessary libraries.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" socket\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" threading\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next, we will define some constants that we will be using in our code.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"HOST \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'localhost'\"\n          }), \"  \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# The server's hostname or IP address\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"PORT \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"55555\"\n          }), \"        \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# The port used by the server\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.strong, {\n        children: \"HOST\"\n      }), \" variable is set to \", _jsx(_components.strong, {\n        children: \"'localhost'\"\n      }), \", which means that the server will only accept connections from clients running on the same computer. If you want to allow clients from other computers to connect to your server, you will need to set \", _jsx(_components.strong, {\n        children: \"HOST\"\n      }), \" to the IP address of your computer.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.strong, {\n        children: \"PORT\"\n      }), \" variable is set to \", _jsx(_components.strong, {\n        children: \"55555\"\n      }), \", which is an arbitrary number that we have chosen for this tutorial. You can choose any available port number that you like.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now let's create a function called \", _jsx(_components.strong, {\n        children: \"handle_client\"\n      }), \" that will be responsible for handling messages from a single client.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"handle_client\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"conn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" addr\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f\\\"[NEW CONNECTION] \"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"addr\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \" connected.\\\"\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    connected \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"True\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"while\"\n          }), \" connected\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        msg \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" conn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"recv\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1024\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" msg\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            broadcast\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f\\\"[\"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"addr\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"] \"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"msg\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \".\"\n              }), \"decode\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), _jsx(_components.span, {\n                className: \"token string\",\n                children: \"'utf-8'\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"\\\"\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    conn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"close\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This function takes two parameters: \", _jsx(_components.strong, {\n        children: \"conn\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"addr\"\n      }), \". \", _jsx(_components.strong, {\n        children: \"conn\"\n      }), \" is the connection object returned by \", _jsx(_components.strong, {\n        children: \"socket.accept()\"\n      }), \", and \", _jsx(_components.strong, {\n        children: \"addr\"\n      }), \" is the address of the client that has connected to the server.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.strong, {\n        children: \"handle_client\"\n      }), \" function first prints a message to the console indicating that a new client has connected. It then enters a loop that continuously receives messages from the client using the \", _jsx(_components.strong, {\n        children: \"conn.recv()\"\n      }), \" method.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If a message is received, the function calls a \", _jsx(_components.strong, {\n        children: \"broadcast()\"\n      }), \" function that we will define later. The \", _jsx(_components.strong, {\n        children: \"broadcast()\"\n      }), \" function will send the message to all other clients connected to the server.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Finally, when the loop is exited (which happens when the client disconnects), the function closes the connection using the \", _jsx(_components.strong, {\n        children: \"conn.close()\"\n      }), \" method.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now let's create a function called \", _jsx(_components.strong, {\n        children: \"start\"\n      }), \" that will be responsible for starting the server and listening for incoming connections.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"start\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    server \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" socket\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"socket\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"socket\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"AF_INET\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" socket\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"SOCK_STREAM\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    server\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"bind\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"HOST\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" PORT\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    server\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"listen\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f\\\"[LISTENING] Server is listening on \"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"HOST\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \":\"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"PORT\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"\\\"\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"while\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"True\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        conn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" addr \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" server\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"accept\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        thread \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" threading\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Thread\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"target\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \"handle_client\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" args\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"conn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" addr\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        thread\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"start\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f\\\"[ACTIVE CONNECTIONS] \"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"threading\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \".\"\n              }), \"activeCount\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"-\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token number\",\n                children: \"1\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"\\\"\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This function creates a new socket object using \", _jsx(_components.strong, {\n        children: \"socket.socket()\"\n      }), \" and binds it to the \", _jsx(_components.strong, {\n        children: \"HOST\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"PORT\"\n      }), \" variables using \", _jsx(_components.strong, {\n        children: \"socket.bind()\"\n      }), \". It then listens for incoming connections using \", _jsx(_components.strong, {\n        children: \"socket.listen()\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The function enters an infinite loop that continuously accepts incoming connections using \", _jsx(_components.strong, {\n        children: \"socket.accept()\"\n      }), \". For each new connection, it creates a new thread that runs the \", _jsx(_components.strong, {\n        children: \"handle_client()\"\n      }), \" function using the \", _jsx(_components.strong, {\n        children: \"threading.Thread()\"\n      }), \" constructor. The \", _jsx(_components.strong, {\n        children: \"args\"\n      }), \" parameter is used to pass the \", _jsx(_components.strong, {\n        children: \"conn\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"addr\"\n      }), \" variables to the \", _jsx(_components.strong, {\n        children: \"handle_client()\"\n      }), \" function.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After starting the thread, the function prints a message to the console indicating that a new client has connected and how many active connections there are.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Broadcasting Messages\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now let's create the \", _jsx(_components.strong, {\n        children: \"broadcast()\"\n      }), \" function that we mentioned earlier. This function will be responsible for sending messages to all clients connected to the server.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"broadcast\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"msg\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" client \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" clients\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        client\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"send\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"msg\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"encode\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'utf-8'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This function takes a single parameter, \", _jsx(_components.strong, {\n        children: \"msg\"\n      }), \", which is the message that we want to send to all clients.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The function then loops through a list of all connected clients and uses the \", _jsx(_components.strong, {\n        children: \"send()\"\n      }), \" method of each client's connection object to send the message. We encode the message using \", _jsx(_components.strong, {\n        children: \"utf-8\"\n      }), \" before sending it to ensure that it is sent in a format that the client can understand.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Keeping Track of Connected Clients\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We also need to keep track of all clients that are currently connected to the server. To do this, we will create a global variable called \", _jsx(_components.strong, {\n        children: \"clients\"\n      }), \" that will be a list of all connected client connection objects.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"clients \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We will then modify the \", _jsx(_components.strong, {\n        children: \"handle_client()\"\n      }), \" function to add the client's connection object to the \", _jsx(_components.strong, {\n        children: \"clients\"\n      }), \" list when the client connects, and remove it from the list when the client disconnects.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"handle_client\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"conn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" addr\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f\\\"[NEW CONNECTION] \"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"addr\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \" connected.\\\"\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    clients\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"append\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"conn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    connected \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"True\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"while\"\n          }), \" connected\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        msg \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" conn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"recv\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1024\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"if\"\n          }), \" msg\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            broadcast\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f\\\"[\"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"addr\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"] \"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"msg\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \".\"\n              }), \"decode\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"(\"\n              }), _jsx(_components.span, {\n                className: \"token string\",\n                children: \"'utf-8'\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \")\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"\\\"\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"else\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"            connected \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"False\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    clients\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"remove\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"conn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    conn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"close\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We first add the client's connection object to the \", _jsx(_components.strong, {\n        children: \"clients\"\n      }), \" list using \", _jsx(_components.strong, {\n        children: \"clients.append()\"\n      }), \". We then modify the loop to exit when the client disconnects by checking if the \", _jsx(_components.strong, {\n        children: \"recv()\"\n      }), \" method returns an empty byte string. If the loop exits, we remove the client's connection object from the \", _jsx(_components.strong, {\n        children: \"clients\"\n      }), \" list using \", _jsx(_components.strong, {\n        children: \"clients.remove()\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Testing the Server\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have implemented all of the necessary code, let's test our server.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Start by running the \", _jsx(_components.strong, {\n        children: \"start()\"\n      }), \" function in your Python file.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"start\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will start the server and print a message to the console indicating that it is listening for incoming connections.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next, open a new terminal window and run the following command to connect to the server:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"telnet localhost 55555\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will connect you to the server using the Telnet protocol. You should see a message in the console indicating that a new client has connected.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now you can start sending messages to the server. Type a message and press Enter to send it. You should see the message appear in the console of the server, indicating that it has been received and broadcast to all connected clients.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To test the broadcast functionality, open another terminal window and connect to the server using Telnet again. Now when you send a message from one client, you should see it appear in the console of both clients.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we have learned how to build a simple TCP chat server using Python's socket library. We covered the basics of socket programming, including creating a socket object, binding it to a specific address and port, and listening for incoming connections.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We also learned how to handle incoming connections using threads, how to broadcast messages to all connected clients, and how to keep track of connected clients.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Socket programming can be complex and challenging, but with a solid understanding of the basics, it becomes much more manageable. Hopefully, this article has helped you gain a better understanding of socket programming and how to build a simple chat server using Python.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Building a TCP Chat Server with Python's Socket Library","metaDesc":"Chat applications are becoming increasingly popular these days. They enable people to communicate with one another in real-time, and they can be used for a variety of purposes, including socializing, business, and education. In this tutorial, we will be building a simple TCP chat server using Python's socket library.\n\n","tags":["TCP Chat Server with Python's Socket Library"],"slug":"building-a-tcp-chat-server-with-python-s-socket-library","readTime":6,"img":"https://images.pexels.com/photos/4974907/pexels-photo-4974907.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}