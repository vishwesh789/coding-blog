{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"If you're building a web application with Flask, you may notice that your app can start to slow down as you add more features or receive more traffic. One way to speed up your Flask application is to use caching. Caching is the process of storing frequently used data in memory, so that it can be quickly accessed without needing to be recalculated or retrieved from a database. In this article, we'll explore Flask-Caching, a caching extension for Flask that makes it easy to cache parts of your application.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Flask-Caching?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Flask-Caching is an extension for Flask that provides caching support for your application. It allows you to easily cache the results of expensive function calls, database queries, or other operations that can slow down your application. Flask-Caching supports a variety of caching backends, including Redis, Memcached, and in-memory caching.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Installing Flask-Caching\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To use Flask-Caching, you'll first need to install it. You can do this using pip, the Python package manager. Open a terminal or command prompt and enter the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"pip install Flask-Caching\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Configuring Flask-Caching\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once you've installed Flask-Caching, you'll need to configure it for your application. You can do this by adding the following lines to your Flask application:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" flask \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" Flask\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" flask_caching \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" Cache\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"app \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" Flask\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"__name__\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"cache \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" Cache\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"app\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" config\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'CACHE_TYPE'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'simple'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will create a Flask application and a Flask-Caching cache object. The \", _jsx(_components.strong, {\n        children: \"config\"\n      }), \" argument specifies which caching backend to use. In this case, we're using the \", _jsx(_components.strong, {\n        children: \"simple\"\n      }), \" backend, which stores cached data in memory. Other backends, such as Redis or Memcached, require additional configuration.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Using Flask-Caching\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that you've configured Flask-Caching, you can use it to cache parts of your application. Flask-Caching provides several decorators that you can use to cache the results of function calls.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Caching function results\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.strong, {\n        children: \"@cache.cached\"\n      }), \" decorator can be used to cache the results of a function call. For example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" datetime \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" datetime\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" flask \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" jsonify\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token decorator annotation punctuation\",\n            children: [\"@app\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \".\"\n            }), \"route\"]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'/time'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token decorator annotation punctuation\",\n            children: [\"@cache\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \".\"\n            }), \"cached\"]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"timeout\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"60\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"get_current_time\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" jsonify\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'time'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" datetime\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"utcnow\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"isoformat\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, the \", _jsx(_components.strong, {\n        children: \"get_current_time\"\n      }), \" function returns the current time as a JSON object. The \", _jsx(_components.strong, {\n        children: \"@cache.cached\"\n      }), \" decorator caches the result of the function for 60 seconds. If the function is called again within 60 seconds, Flask-Caching will return the cached result instead of calling the function again.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Caching with dynamic keys\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Sometimes you may want to cache the result of a function call with dynamic arguments. For example, if you have a route that takes a user ID as a parameter, you may want to cache the result of that route for each user ID. Flask-Caching provides the \", _jsx(_components.strong, {\n        children: \"make_cache_key\"\n      }), \" function to generate dynamic cache keys. For example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" flask \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" request\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token decorator annotation punctuation\",\n            children: [\"@app\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \".\"\n            }), \"route\"]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'/user/<int:user_id>'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token decorator annotation punctuation\",\n            children: [\"@cache\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \".\"\n            }), \"cached\"]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"timeout\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"60\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" key_prefix\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'user'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"get_user\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"user_id\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    user \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" User\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"query\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"user_id\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" jsonify\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'username'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" user\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"username\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token decorator annotation punctuation\",\n            children: [\"@cache\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \".\"\n            }), \"make_cache_key\"]\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"user_cache_key\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"user_id\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f'user:\"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"user_id\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'\"\n            })]\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"cache_key \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" user_cache_key\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"request\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"view_args\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'user_id'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, the \", _jsx(_components.strong, {\n        children: \"get_user\"\n      }), \" function returns the username for a user with a given ID. The \", _jsx(_components.strong, {\n        children: \"@cache.cached\"\n      }), \" decorator caches the result of the function for 60 seconds and uses the \", _jsx(_components.strong, {\n        children: \"user\"\n      }), \" key prefix. The \", _jsx(_components.strong, {\n        children: \"cache_key\"\n      }), \" variable is generated using the \", _jsx(_components.strong, {\n        children: \"user_cache_key\"\n      }), \" function, which uses the \", _jsx(_components.strong, {\n        children: \"user_id\"\n      }), \" parameter to generate a dynamic cache key.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Caching function calls with arguments\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Sometimes you may want to cache the result of a function call with arguments. Flask-Caching provides the \", _jsx(_components.strong, {\n        children: \"@cache.memoize\"\n      }), \" decorator to cache the result of a function call with arguments. For example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token decorator annotation punctuation\",\n            children: [\"@app\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \".\"\n            }), \"route\"]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'/add'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"add_numbers\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    a \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" request\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"args\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'a'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"type\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"int\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    b \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" request\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"args\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'b'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"type\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"int\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"str\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"add\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"a\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" b\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token decorator annotation punctuation\",\n            children: [\"@cache\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \".\"\n            }), \"memoize\"]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"timeout\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"60\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"add\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"a\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" b\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" a \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" b\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, the \", _jsx(_components.strong, {\n        children: \"add_numbers\"\n      }), \" function takes two numbers as query parameters and returns their sum. The \", _jsx(_components.strong, {\n        children: \"add\"\n      }), \" function calculates the sum of two numbers and caches the result for 60 seconds using the \", _jsx(_components.strong, {\n        children: \"@cache.memoize\"\n      }), \" decorator.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Caching is a powerful tool for speeding up your Flask application. With Flask-Caching, it's easy to cache the results of expensive function calls, database queries, or other operations that can slow down your application. By using Flask-Caching, you can improve the performance of your Flask application and provide a better experience for your users.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Flask-Caching: How to Speed Up Your Web Application","metaDesc":"If you're building a web application with Flask, you may notice that your app can start to slow down as you add more features or receive more traffic. One way to speed up your Flask application is to use caching. Caching is the process of storing frequently used data in memory, so that it can be quickly accessed without needing to be recalculated or retrieved from a database. In this article, we'll explore Flask-Caching, a caching extension for Flask that makes it easy to cache parts of your application.","tags":["Flask-Caching"],"slug":"flask-caching-how-to-speed-up-your-web-application","readTime":4,"img":"https://images.pexels.com/photos/1181677/pexels-photo-1181677.jpeg","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}