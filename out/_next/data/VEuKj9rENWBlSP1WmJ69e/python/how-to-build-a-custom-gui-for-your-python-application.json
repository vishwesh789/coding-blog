{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Graphical User Interfaces (GUIs) are essential in building interactive applications. With Python, there are several options for creating GUIs, including PyQt, Tkinter, and wxPython. In this tutorial, we will be focusing on Tkinter, which is Python's standard GUI package. We will walk through the process of building a custom GUI for a Python application.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 1: Installing Tkinter\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we can start building our GUI, we need to make sure that Tkinter is installed. Tkinter is included in the standard Python distribution, so you should already have it installed. If you're unsure whether you have it installed, you can check by running the following command in your terminal:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"python -m tkinter\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will open a window with the Tkinter version number. If you see an error message, you will need to install Tkinter. You can do this by running the following command in your terminal:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"sudo apt-get install python3-tk\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 2: Importing Tkinter\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To use Tkinter in our Python code, we need to import it. We can do this by adding the following line at the beginning of our code:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" tkinter \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" tk\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will import the Tkinter module and alias it as \\\"tk\\\", which makes it easier to reference throughout our code.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 3: Creating a Window\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The first step in building a GUI is to create a window. We can do this by creating an instance of the \", _jsx(_components.strong, {\n        children: \"Tk\"\n      }), \" class, which represents the main window of our application. Here's an example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"window \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" tk\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Tk\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"window\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"title\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"My Application\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"window\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"geometry\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"400x400\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This code creates a window with a title of \\\"My Application\\\" and a size of 400x400 pixels. You can adjust the title and size to fit your needs.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 4: Adding Widgets\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have our window, we can start adding widgets to it. Widgets are the individual components of a GUI, such as buttons, labels, and text boxes.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Labels\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Labels are used to display text on the screen. Here's an example of how to create a label:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"label \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" tk\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Label\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"window\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" text\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Hello, World!\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"label\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pack\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code creates a label with the text \\\"Hello, World!\\\" and adds it to the window using the \", _jsx(_components.strong, {\n        children: \"pack()\"\n      }), \" method. The \", _jsx(_components.strong, {\n        children: \"pack()\"\n      }), \" method is used to position the widget within the window.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Buttons\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Buttons are used to trigger actions when clicked. Here's an example of how to create a button:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"on_button_click\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Button clicked\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"button \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" tk\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Button\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"window\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" text\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Click me\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" command\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \"on_button_click\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"button\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pack\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code creates a button with the text \\\"Click me\\\" and a function to call when it's clicked. The \", _jsx(_components.strong, {\n        children: \"command\"\n      }), \" parameter is used to specify the function to call.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Entry Boxes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Entry boxes are used to allow the user to input text. Here's an example of how to create an entry box:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"entry \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" tk\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Entry\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"window\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"entry\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pack\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code creates an entry box and adds it to the window using the \", _jsx(_components.strong, {\n        children: \"pack()\"\n      }), \" method. You can retrieve the text entered by the user using the \", _jsx(_components.strong, {\n        children: \"get()\"\n      }), \" method.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 5: Running the Application\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Once we've created our window and added our widgets, we're ready to run the application. We can do this by calling the \", _jsx(_components.strong, {\n        children: \"mainloop()\"\n      }), \" method of our window instance:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"window\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"mainloop\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will start the GUI and keep it running until the user closes the window. Any interactions with the GUI will be handled by the \", _jsx(_components.strong, {\n        children: \"mainloop()\"\n      }), \" method.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 6: Styling the GUI\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By default, Tkinter widgets have a basic appearance. However, we can customize the look and feel of our GUI using styles. Styles are a way to define the appearance of widgets using a set of properties, such as font size and color.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To create a style, we first need to create an instance of the \", _jsx(_components.strong, {\n        children: \"tk.Style\"\n      }), \" class:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"style \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" tk\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Style\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can then use the \", _jsx(_components.strong, {\n        children: \"configure()\"\n      }), \" method to set the properties of the style:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"style\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"configure\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"TButton\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" font\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Arial\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"12\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code sets the font of all \", _jsx(_components.strong, {\n        children: \"TButton\"\n      }), \" widgets to Arial with a size of 12.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can apply a style to a widget by setting its \", _jsx(_components.strong, {\n        children: \"style\"\n      }), \" parameter:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"button \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" tk\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Button\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"window\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" text\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Click me\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" style\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"TButton\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This code creates a button with the style \\\"TButton\\\".\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 7: Handling Events\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Events are actions that occur in the GUI, such as clicking a button or entering text into a text box. We can handle events using event handlers, which are functions that are called when an event occurs.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To create an event handler, we simply define a function that takes an event object as its parameter. For example, here's how we could create an event handler for a button click:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"on_button_click\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"event\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Button clicked\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"button \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" tk\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"Button\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"window\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" text\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Click me\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"button\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"bind\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"<Button-1>\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" on_button_click\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code creates a button and binds the \", _jsx(_components.strong, {\n        children: \"on_button_click()\"\n      }), \" function to the left mouse button click event (\", _jsx(_components.strong, {\n        children: \"\\\"<Button-1>\\\"\"\n      }), \"). When the user clicks the button, the \", _jsx(_components.strong, {\n        children: \"on_button_click()\"\n      }), \" function will be called.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this tutorial, we've covered the basics of building a custom GUI for a Python application using Tkinter. We started by installing and importing Tkinter, then created a window and added widgets to it. We also discussed how to style our GUI using styles and how to handle events using event handlers.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With these skills, you should be able to build a simple GUI for your Python application. Tkinter is a powerful and flexible GUI toolkit that can be used to create complex and interactive applications. With some practice and experimentation, you can create professional-looking GUIs that enhance the user experience of your applications.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"How to Build a Custom GUI for Your Python Application","metaDesc":"Graphical User Interfaces (GUIs) are a critical component of many modern applications. GUIs allow users to interact with applications in a visual way, making them more intuitive and user-friendly. Python is a versatile programming language that can be used for a variety of tasks, including building custom GUIs. In this tutorial, we'll go over the basics of building a custom GUI for your Python application.","tags":["Custom GUI in Python"],"slug":"how-to-build-a-custom-gui-for-your-python-application","readTime":5,"img":"https://images.pexels.com/photos/1181359/pexels-photo-1181359.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}