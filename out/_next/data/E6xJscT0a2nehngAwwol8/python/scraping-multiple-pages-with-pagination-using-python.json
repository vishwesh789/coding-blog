{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Web scraping is the process of extracting data from websites. It is a valuable technique for many data-driven projects such as web indexing, data mining, and data analysis. In this article, we will learn how to scrape multiple pages with pagination using Python.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Introduction\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Often, web pages contain large amounts of data that we want to scrape. In many cases, this data is spread across multiple pages with pagination. Scraping multiple pages with pagination can be a tedious and time-consuming process. However, Python provides us with many powerful tools to make this task easier.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Getting Started\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we start, we need to install some libraries. We will use the requests library to make HTTP requests and BeautifulSoup to parse the HTML content. We can install these libraries using pip:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"!pip install requests beautifulsoup4\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have the necessary libraries installed, let's start by scraping a single page.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Scraping a Single Page\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's start by scraping a single page. We will use the requests library to make a GET request to the website and get the HTML content. We will then use BeautifulSoup to parse the HTML content and extract the data we need.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" requests\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" bs4 \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" BeautifulSoup\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"url \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"https://www.example.com/page/1\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"response \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" requests\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"url\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"soup \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" BeautifulSoup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"content\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"html.parser\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# extract data here\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the code above, we have made a GET request to the URL \", _jsx(_components.strong, {\n        children: \"https://www.example.com/page/1\"\n      }), \" and got the HTML content. We have then used BeautifulSoup to parse the HTML content and store it in the \", _jsx(_components.strong, {\n        children: \"soup\"\n      }), \" variable.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now we can extract the data we need from the HTML content. Let's say we want to extract the title of the page. We can do this using the \", _jsx(_components.strong, {\n        children: \"title\"\n      }), \" tag.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"title \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" soup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"find\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"title\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"text\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"title\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The output of this code will be the title of the page.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Scraping Multiple Pages\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now let's move on to scraping multiple pages with pagination. We will use a loop to iterate over the pages and scrape the data from each page.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" requests\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" bs4 \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" BeautifulSoup\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"11\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    url \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f\\\"https://www.example.com/page/\"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"i\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"\\\"\"\n            })]\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    response \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" requests\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"url\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    soup \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" BeautifulSoup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"content\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"html.parser\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# extract data here\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the code above, we have used a loop to iterate over the pages. We have made a GET request to each URL and parsed the HTML content using BeautifulSoup.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now we can extract the data we need from each page. Let's say we want to extract the titles of all the pages. We can do this using the \", _jsx(_components.strong, {\n        children: \"title\"\n      }), \" tag and a list.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" requests\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" bs4 \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" BeautifulSoup\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"titles \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"11\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    url \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f\\\"https://www.example.com/page/\"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"i\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"\\\"\"\n            })]\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    response \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" requests\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"url\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    soup \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" BeautifulSoup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"content\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"html.parser\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    title \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" soup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"find\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"title\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"text\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    titles\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"append\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"title\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"titles\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The output of this code will be a list of the titles of all the pages.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Handling Pagination\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sometimes, pagination can be tricky to handle. The URLs of the pages may not be sequential, or they may have query parameters that need to be modified. Fortunately, Python provides us with many tools to handle pagination.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's say we have a website that uses query parameters to handle pagination. The URL of the first page may look like this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"https://www.example.com/page?limit=10&page=1\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The URL of the second page may look like this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"https://www.example.com/page?limit=10&page=2\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To scrape multiple pages with pagination in this case, we need to modify the query parameter \", _jsx(_components.strong, {\n        children: \"page\"\n      }), \" in each request.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" requests\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" bs4 \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" BeautifulSoup\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"limit \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"10\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"for\"\n          }), \" i \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"in\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"range\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"11\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    url \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f\\\"https://www.example.com/page?limit=\"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"limit\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"&page=\"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"i\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"\\\"\"\n            })]\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    response \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" requests\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"url\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    soup \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" BeautifulSoup\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"content\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"html.parser\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# extract data here\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the code above, we have used the \", _jsx(_components.strong, {\n        children: \"limit\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"page\"\n      }), \" query parameters to handle pagination. We have modified the \", _jsx(_components.strong, {\n        children: \"page\"\n      }), \" parameter in each request to scrape multiple pages.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we have learned how to scrape multiple pages with pagination using Python. We have used the requests library to make HTTP requests and BeautifulSoup to parse the HTML content. We have also learned how to handle pagination using query parameters. Web scraping is a powerful technique for data-driven projects, and Python provides us with many powerful tools to make this task easier.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you want to learn more about web scraping, I recommend checking out the Python documentation and other online resources. Happy scraping!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Scraping Multiple Pages with Pagination Using Python","metaDesc":"Web scraping is the process of extracting data from websites. It is a valuable technique for many data-driven projects such as web indexing, data mining, and data analysis. In this article, we will learn how to scrape multiple pages with pagination using Python.","tags":["Scraping Multiple Pages"],"slug":"scraping-multiple-pages-with-pagination-using-python","readTime":4,"img":"https://images.pexels.com/photos/4164418/pexels-photo-4164418.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}