{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Machine learning is a rapidly growing field that involves the use of algorithms to learn patterns from data. One common task in machine learning is the creation of a pipeline that takes raw data, preprocesses it, trains a model, and evaluates the model's performance. In this article, we will explore how to build a machine learning pipeline using two popular Python libraries: Scikit-learn and Pandas.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is a Machine Learning Pipeline?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A machine learning pipeline is a series of steps that transform raw data into a final output, usually a trained machine learning model. The steps in the pipeline can include data cleaning, preprocessing, feature selection, model selection, hyperparameter tuning, and evaluation. The purpose of a machine learning pipeline is to automate the process of training a model, making it easier to iterate on different combinations of preprocessing and modeling steps.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 1: Import the Data\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The first step in building a machine learning pipeline is to import the data. For this example, we will use the famous Iris dataset, which contains measurements of flower petals and sepals. To import the data, we will use Pandas' \", _jsx(_components.strong, {\n        children: \"read_csv()\"\n      }), \" function:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" pandas \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" pd \\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"data \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" pd\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"read_csv\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"iris.csv\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 2: Preprocess the Data\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The second step is to preprocess the data. This step involves cleaning the data, transforming it, and selecting features. For this example, we will clean the data by removing any rows that contain missing values:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"data \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"dropna\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next, we will transform the data by converting the categorical variable (species) into numerical values using one-hot encoding:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"data \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" pd\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get_dummies\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" columns\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"species\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Finally, we will select the features that we want to use in our model. For this example, we will use all of the numerical columns:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"X \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"sepal_length\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"sepal_width\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"petal_length\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"petal_width\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"y \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"species_setosa\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"species_versicolor\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"species_virginica\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 3: Split the Data\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The third step is to split the data into training and testing sets. This step is important because it allows us to evaluate the performance of our model on data that it has not seen before. For this example, we will use Scikit-learn's \", _jsx(_components.strong, {\n        children: \"train_test_split()\"\n      }), \" function to split the data into 80% training and 20% testing:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" sklearn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"model_selection \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" train_test_split\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"X_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" X_test\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_test \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" train_test_split\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"X\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" test_size\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" random_state\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"42\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 4: Train the Model\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The fourth step is to train the model. For this example, we will use Scikit-learn's \", _jsx(_components.strong, {\n        children: \"LogisticRegression()\"\n      }), \" model, which is a binary classification algorithm that can be used for multiclass classification by training multiple binary classifiers:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" sklearn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"linear_model \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" LogisticRegression\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"model \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" LogisticRegression\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"model\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"fit\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"X_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 5: Evaluate the Model\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The fifth and final step is to evaluate the model. For this example, we will use Scikit-learn's \", _jsx(_components.strong, {\n        children: \"accuracy_score()\"\n      }), \" function to calculate the accuracy of the model on the test data:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" sklearn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"metrics \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" accuracy_score\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"y_pred \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" model\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"predict\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"X_test\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"accuracy \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" accuracy_score\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"y_test\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_pred\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token string-interpolation\",\n            children: [_jsx(_components.span, {\n              className: \"token string\",\n              children: \"f\\\"Accuracy: \"\n            }), _jsxs(_components.span, {\n              className: \"token interpolation\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"accuracy\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"\\\"\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Putting it All Together\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have gone through each step of the machine learning pipeline, let's put it all together by creating a function that takes in the raw data and returns the accuracy of the trained model:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" pandas \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" pd\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" sklearn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"model_selection \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" train_test_split\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" sklearn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"linear_model \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" LogisticRegression\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" sklearn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"metrics \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" accuracy_score\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"build_pipeline\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Preprocess the data\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    data \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"dropna\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    data \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" pd\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get_dummies\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" columns\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"species\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    X \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"sepal_length\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"sepal_width\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"petal_length\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"petal_width\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    y \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"species_setosa\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"species_versicolor\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"species_virginica\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Split the data\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    X_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" X_test\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_test \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" train_test_split\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"X\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" test_size\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" random_state\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"42\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Train the model\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    model \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" LogisticRegression\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    model\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"fit\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"X_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# Evaluate the model\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    y_pred \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" model\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"predict\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"X_test\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    accuracy \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" accuracy_score\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"y_test\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_pred\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" accuracy\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can now use this function with any raw data to build and evaluate a machine learning pipeline.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we have explored how to build a machine learning pipeline using Scikit-learn and Pandas. We started by importing the data and then preprocessing it by cleaning, transforming, and selecting features. We then split the data into training and testing sets, trained a logistic regression model, and evaluated its performance. Finally, we put all of the steps together into a function that can be used with any raw data. With this knowledge, you can start building your own machine learning pipelines and exploring the vast world of machine learning.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"How to Build a Machine Learning Pipeline with Scikit-learn and Pandas","metaDesc":"Machine learning is a rapidly growing field that involves the use of algorithms to learn patterns from data. One common task in machine learning is the creation of a pipeline that takes raw data, preprocesses it, trains a model, and evaluates the model's performance. In this article, we will explore how to build a machine learning pipeline using two popular Python libraries: Scikit-learn and Pandas.","tags":["Machine Learning"],"slug":"how-to-build-a-machine-learning-pipeline-with-scikit-learn-and-pandas","readTime":4,"img":"https://images.pexels.com/photos/965345/pexels-photo-965345.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}