{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Time series analysis is the statistical method of analyzing time-ordered data. This type of analysis is commonly used in fields such as finance, economics, and engineering, among others, to predict future trends and patterns in the data. However, the complexity of time series analysis can make it difficult for beginners to understand and apply.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we will introduce you to the Prophet library, a powerful tool for time series forecasting. We will provide an overview of Prophet and walk you through a simple example to show how it works.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Prophet?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Prophet is an open-source library for time series forecasting developed by Facebook. It is designed to be easy to use, flexible, and scalable, making it suitable for both beginners and experienced users.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Prophet uses an additive model that decomposes the time series into trend, seasonality, and holidays. It then fits the model to the data using Bayesian optimization techniques to generate forecasts.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Prophet has become a popular tool for time series forecasting due to its ease of use and accurate predictions.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Installing Prophet\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we dive into the example, let's quickly go over how to install Prophet. Prophet is available for both Python and R. In this example, we will be using Python, but the installation process for R is similar.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To install Prophet in Python, open your terminal and run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"pip install fbprophet\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Example: Forecasting the Price of Bitcoin\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have Prophet installed, let's walk through a simple example of using Prophet to forecast the price of Bitcoin.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, we will import the necessary libraries:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" pandas \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" pd\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" matplotlib\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pyplot \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" plt\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" fbprophet \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" Prophet\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next, we will read in the Bitcoin price data:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"df \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" pd\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"read_csv\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'BTC-USD.csv'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can then take a look at the data using the \", _jsx(_components.strong, {\n        children: \"head()\"\n      }), \" method:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"df\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"head\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will output the first five rows of the data:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"         Date         Open         High          Low        Close    Adj Close        Volume\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"0  2021-01-01  28994.00977  29600.62695  28803.58594  29374.15234  29374.15234  40730301359\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"1  2021-01-02  29376.45508  33155.11719  29091.18164  32127.26758  32127.26758  67865420724\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"2  2021-01-03  32033.97070  34608.55859  32000.72461  32782.02344  32782.02344  78665235202\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"3  2021-01-04  32810.94922  33440.21875  28722.75586  31971.91406  31971.91406  81163475380\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"4  2021-01-05  31977.04102  34437.58984  29091.18164  33992.42969  33992.42969  67547435456\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can see that the data contains the date, open price, high price, low price, close price, adjusted close price, and volume.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To use Prophet, we need to rename the columns to \", _jsx(_components.strong, {\n        children: \"ds\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"y\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"df \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" df\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Date'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Close'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"df \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" df\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"rename\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"columns\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Date'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'ds'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Close'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'y'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.strong, {\n        children: \"ds\"\n      }), \" column should contain the date and time information, and the \", _jsx(_components.strong, {\n        children: \"y\"\n      }), \" column should contain the time series data.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can then create a Prophet model and fit it to our data:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"model \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" Prophet\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"model\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"fit\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"df\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Once the model is fit, we can use it to make predictions for future dates. We can do this by creating a new dataframe with future dates using the \", _jsx(_components.strong, {\n        children: \"make_future_dataframe()\"\n      }), \" method and then using the \", _jsx(_components.strong, {\n        children: \"predict()\"\n      }), \" method to generate predictions:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"future \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" model\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"make_future_dataframe\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"periods\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"365\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"forecast \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" model\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"predict\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"future\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, we are creating a new dataframe with 365 days of future dates. We can then generate predictions for these future dates using the \", _jsx(_components.strong, {\n        children: \"predict()\"\n      }), \" method.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can visualize the predictions using the \", _jsx(_components.strong, {\n        children: \"plot()\"\n      }), \" method:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"fig \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" model\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"plot\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"forecast\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"show\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will generate a plot showing the historical data as well as the predicted values for the future:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"From the plot, we can see that the model predicts the price of Bitcoin will continue to increase over the next year.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we introduced you to Prophet, a powerful tool for time series forecasting. We walked through a simple example of using Prophet to forecast the price of Bitcoin.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Prophet is a great tool for beginners to get started with time series analysis. It is easy to use and provides accurate predictions. With a little practice, you can use Prophet to forecast trends and patterns in your own time series data.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Time Series Analysis with Prophet: A Beginner's Guide","metaDesc":"Time series data is everywhere in our daily lives - from stock prices to weather forecasts. Understanding and analyzing time series data is essential in many fields, including finance, economics, and meteorology. In recent years, a new tool for time series analysis has emerged - Prophet. In this beginner's guide, we will explore what Prophet is and how it can be used for time series analysis.","tags":["python"],"slug":"time-series-analysis-with-prophet-a-beginner-s-guide","readTime":4,"img":"https://images.pexels.com/photos/12840354/pexels-photo-12840354.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}