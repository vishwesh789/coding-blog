{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ol: \"ol\",\n    li: \"li\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"If you are working with Redux, you might have already heard of Redux Thunk and Saga, two popular middleware libraries for handling asynchronous actions. However, there is another library that is gaining popularity in the Redux community: Redux Observable. In this article, we will explore what Redux Observable is, how it works, and why it can be a good alternative to Redux Thunk and Saga.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Redux Observable?\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Redux Observable is a middleware library for Redux that allows you to handle asynchronous actions using reactive programming concepts. It is based on the \", _jsx(_components.a, {\n        href: \"https://rxjs-dev.firebaseapp.com/\",\n        children: \"RxJS\"\n      }), \" library, which is a powerful library for reactive programming in JavaScript.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With Redux Observable, you can create observables that emit actions, and then use operators to transform and combine these observables in various ways. This allows you to create complex asynchronous logic in a declarative and composable way.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"How Redux Observable works\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's take a look at a simple example of how Redux Observable works. Suppose you have a button in your UI that, when clicked, should fetch some data from an API and then dispatch an action with that data. Here's how you can handle this with Redux Observable:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"import\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token imports\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \" ofType \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"from\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'redux-observable'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"import\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token imports\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \" ajax \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"from\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'rxjs/ajax'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"import\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token imports\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \" map\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" mergeMap \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"from\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'rxjs/operators'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token constant\",\n            children: \"FETCH_DATA\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'FETCH_DATA'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token constant\",\n            children: \"FETCH_DATA_SUCCESS\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'FETCH_DATA_SUCCESS'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function-variable function\",\n            children: \"fetchData\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"type\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token constant\",\n            children: \"FETCH_DATA\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function-variable function\",\n            children: \"fetchDataSuccess\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"data\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"type\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token constant\",\n            children: \"FETCH_DATA_SUCCESS\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"payload\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" data \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function-variable function\",\n            children: \"fetchDataEpic\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"action$\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" action$\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"pipe\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"ofType\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token constant\",\n            children: \"FETCH_DATA\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"mergeMap\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" ajax\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"getJSON\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'https://example.com/data'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"map\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"data\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"fetchDataSuccess\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"data\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Usage in a functional component:\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// import { useDispatch } from 'react-redux';\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// import { fetchData } from './actions';\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// ...\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// const dispatch = useDispatch();\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// dispatch(fetchData());\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"export\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token exports\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \" fetchData\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" fetchDataEpic \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's break this down step by step:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"First, we define two action types: \", _jsx(_components.strong, {\n          children: \"FETCH_DATA\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"FETCH_DATA_SUCCESS\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"We define two action creators: \", _jsx(_components.strong, {\n          children: \"fetchData()\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"fetchDataSuccess(data)\"\n        }), \". The \", _jsx(_components.strong, {\n          children: \"fetchData()\"\n        }), \" action creator returns an action with the type \", _jsx(_components.strong, {\n          children: \"FETCH_DATA\"\n        }), \", while the \", _jsx(_components.strong, {\n          children: \"fetchDataSuccess(data)\"\n        }), \" action creator returns an action with the type \", _jsx(_components.strong, {\n          children: \"FETCH_DATA_SUCCESS\"\n        }), \" and a payload of \", _jsx(_components.strong, {\n          children: \"data\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"We define an epic called \", _jsx(_components.strong, {\n          children: \"fetchDataEpic\"\n        }), \" that takes an \", _jsx(_components.strong, {\n          children: \"action$\"\n        }), \" stream as input and returns an output stream. The \", _jsx(_components.strong, {\n          children: \"action$\"\n        }), \" stream represents a stream of actions dispatched to the Redux store.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"We use the \", _jsx(_components.strong, {\n          children: \"ofType\"\n        }), \" operator from Redux Observable to filter out only the \", _jsx(_components.strong, {\n          children: \"FETCH_DATA\"\n        }), \" actions from the \", _jsx(_components.strong, {\n          children: \"action$\"\n        }), \" stream.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"We use the \", _jsx(_components.strong, {\n          children: \"mergeMap\"\n        }), \" operator from RxJS to map each \", _jsx(_components.strong, {\n          children: \"FETCH_DATA\"\n        }), \" action to an AJAX request that fetches some data from the API.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"We use the \", _jsx(_components.strong, {\n          children: \"map\"\n        }), \" operator from RxJS to transform the response data into a \", _jsx(_components.strong, {\n          children: \"FETCH_DATA_SUCCESS\"\n        }), \" action.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Finally, we return the output stream from the \", _jsx(_components.strong, {\n          children: \"fetchDataEpic\"\n        }), \" function.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When the \", _jsx(_components.strong, {\n        children: \"fetchData()\"\n      }), \" action is dispatched, it is picked up by the \", _jsx(_components.strong, {\n        children: \"fetchDataEpic\"\n      }), \" epic. The epic then sends an AJAX request to the API to fetch some data, and then maps the response data to a \", _jsx(_components.strong, {\n        children: \"FETCH_DATA_SUCCESS\"\n      }), \" action, which is dispatched to the Redux store.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Why use Redux Observable?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So, why would you want to use Redux Observable instead of Redux Thunk or Saga? Here are a few reasons:\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Declarative and Composable\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the main advantages of Redux Observable is that it allows you to handle asynchronous logic in a declarative and composable way. By using observables and operators, you can easily define complex asynchronous workflows that are easy to reason about and modify.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Reactive Programming\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Another advantage of Redux Observable is that it is based on reactive programming concepts, which can be a powerful way to handle asynchronous logic. Reactive programming allows you to think about asynchronous workflows as streams of events, and provides a wide range of operators for manipulating and transforming these streams.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Better Error Handling\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Redux Observable also provides better error handling compared to Redux Thunk and Saga. When an error occurs in an epic, you can catch and handle it in a centralized way, which makes it easier to manage errors across your application.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Easy Testing\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Because Redux Observable allows you to define asynchronous logic in a declarative way, it is also easier to test compared to Redux Thunk and Saga. You can use Jest or other testing frameworks to test your epics in isolation, without having to worry about complex control flow or side effects.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Redux Observable is a powerful middleware library for handling asynchronous actions in Redux. It provides a declarative and composable way to handle complex asynchronous logic, based on reactive programming concepts. While Redux Thunk and Saga are still popular choices for handling asynchronous actions in Redux, Redux Observable provides a compelling alternative that can simplify your code and make it easier to manage asynchronous workflows across your application.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Exploring Redux Observable: An alternative to Redux Thunk and Saga","metaDesc":"If you are working with Redux, you might have already heard of Redux Thunk and Saga, two popular middleware libraries for handling asynchronous actions. However, there is another library that is gaining popularity in the Redux community: Redux Observable. In this article, we will explore what Redux Observable is, how it works, and why it can be a good alternative to Redux Thunk and Saga.","tags":["react"],"slug":"exploring-redux-observable-an-alternative-to-redux-thunk-and-saga","readTime":"4","img":"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}