{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"When it comes to developing and deploying Node.js applications, Docker is an excellent tool that can make the process a lot smoother. Docker allows you to package your application along with all its dependencies into a single container, which can be easily deployed to any environment. However, debugging Dockerized applications can be a bit tricky, especially for beginners. In this article, we will discuss how to debug Node.js Dockerized applications using Visual Studio Code, one of the most popular code editors.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Prerequisites\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we dive into debugging, make sure you have the following tools installed on your system:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Docker\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Visual Studio Code\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Node.js\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The \\\"Docker\\\" extension for Visual Studio Code\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Setting up the Project\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For the purpose of this article, we will use a simple Node.js application that calculates the square of a given number. To Dockerize this application, we will create a Dockerfile in the root directory of the project with the following contents:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"FROM\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"node\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"14\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"WORKDIR\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"app\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"COPY\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"package\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"json\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"RUN\"\n          }), \" npm install\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"COPY\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token constant\",\n            children: \"CMD\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"npm\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"start\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This Dockerfile pulls the Node.js version 14 image from Docker Hub, sets the working directory to /app, copies the package.json file, installs the dependencies, copies the entire project directory, and runs the npm start command.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next, we will build the Docker image using the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"docker build \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \"t my\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \"node\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \"app \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This command builds the Docker image with the tag \\\"my-node-app\\\" using the Dockerfile in the current directory.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, we can run the Docker container using the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"docker run \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \"p \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3000\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3000\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \"v \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"$\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"pwd\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), \"app \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \"w \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"/app\\\"\"\n          }), \" my\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \"node\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \"app\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This command maps port 3000 on the host to port 3000 in the container, mounts the current directory to /app in the container, sets the working directory to /app, and runs the Docker image with the tag \\\"my-node-app\\\".\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To verify that the application is running, open a web browser and navigate to \", _jsx(_components.a, {\n        href: \"http://localhost:3000/square/5\",\n        children: \"http://localhost:3000/square/5\"\n      }), \". You should see the result \\\"25\\\" on the screen.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Debugging with Visual Studio Code\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To debug the Node.js application running inside the Docker container, we will use the \\\"Attach to Docker\\\" functionality of the \\\"Docker\\\" extension for Visual Studio Code.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, open the project directory in Visual Studio Code. Then, open the \\\"Run and Debug\\\" panel by clicking on the \\\"Run\\\" icon in the left-hand side menu and then selecting the \\\"Run and Debug\\\" option.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next, click on the \\\"create a launch.json file\\\" link at the top of the panel. This will create a new launch.json file in the .vscode directory of your project.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the launch.json file, add the following configuration:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"version\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"0.2.0\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"configurations\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"type\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"node\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"name\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Attach to Docker\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"request\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"attach\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"port\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"9229\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"address\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"localhost\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"localRoot\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"${workspaceFolder}\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"remoteRoot\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"/app\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"protocol\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"inspector\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"restart\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"true\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token string-property property\",\n            children: \"\\\"skipFiles\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"<node_internals>/**\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This configuration specifies that we want to attach the debugger to a Node.js process running inside a Docker container. The \\\"port\\\" and \\\"address\\\" options should match the ones specified in the Docker run command. The \\\"localRoot\\\" specifies the root directory of the project on the local machine, while \\\"remoteRoot\\\" specifies the root directory of the project inside the Docker container. The \\\"skipFiles\\\" option specifies the files that should be skipped while debugging.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, start the application in the Docker container by running the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker run -p 3000:3000 -v $(pwd):/app -w \\\"/app\\\" -p 9229:9229 --expose 9229 my-node-app\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This command adds the \\\"-p 9229:9229 --expose 9229\\\" options to expose the Node.js debugger port and map it to the same port on the host.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next, set a breakpoint in the Node.js code by clicking on the left-hand side of the line number in the code editor.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Finally, start the debugger by selecting the \\\"Attach to Docker\\\" configuration in the \\\"Run and Debug\\\" panel and clicking on the \\\"Start Debugging\\\" button.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Visual Studio Code will now attach the debugger to the Node.js process running inside the Docker container and stop at the breakpoint you set earlier. You can now inspect variables, step through the code, and diagnose any issues.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Debugging Node.js Dockerized applications can seem daunting at first, but with the right tools and configurations, it can be a relatively simple process. In this article, we discussed how to use Visual Studio Code to attach the debugger to a Node.js process running inside a Docker container. By following the steps outlined above, you should now be able to debug your own Node.js Dockerized applications with ease.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Debugging Node.js Dockerized Applications with Visual Studio Code","metaDesc":"When it comes to developing and deploying Node.js applications, Docker is an excellent tool that can make the process a lot smoother. Docker allows you to package your application along with all its dependencies into a single container, which can be easily deployed to any environment. However, debugging Dockerized applications can be a bit tricky, especially for beginners. In this article, we will discuss how to debug Node.js Dockerized applications using Visual Studio Code, one of the most popular code editors.","tags":["node js"],"slug":"debugging-node-js-dockerized-applications-with-visual-studio-code","readTime":4,"img":"https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}