{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"When building a website or application with React, one of the key components you'll need is a navigation menu. And when it comes to navigation, one of the most important features is the ability to indicate which page the user is currently on. This is where the React Router NavLink component comes in.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we'll cover how to use the React Router NavLink component to create active links that visually indicate which page the user is currently on. We'll also go over some common use cases and best practices for using NavLink in your React projects.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is NavLink?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we dive into the specifics of using NavLink, let's first discuss what it is and how it differs from a regular link.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In React Router, a NavLink is a special type of link that has the ability to apply an \\\"active\\\" class to itself when the current URL matches its \", _jsx(_components.strong, {\n        children: \"to\"\n      }), \" prop. This allows you to style the active link differently from other links in your navigation menu, which can help the user quickly identify their current location within your site or app.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here's an example of what a NavLink might look like:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"import\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token imports\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"NavLink\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword module\",\n            children: \"from\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'react-router-dom'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"NavLink\"\n          }), \" to\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"/about\\\"\"\n          }), \" activeClassName\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"active\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"About\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"NavLink\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, the NavLink component is used to create a link to the \\\"/about\\\" page, and the \", _jsx(_components.strong, {\n        children: \"activeClassName\"\n      }), \" prop is used to specify the name of the CSS class that should be applied to the link when it's active.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Creating Active Links with NavLink\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To create an active NavLink, you simply need to include the \", _jsx(_components.strong, {\n        children: \"activeClassName\"\n      }), \" prop with the name of the CSS class you want to use for the active link. Here's an example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"NavLink\"\n          }), \" to\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"/about\\\"\"\n          }), \" activeClassName\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"active\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"About\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"NavLink\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, the \", _jsx(_components.strong, {\n        children: \"to\"\n      }), \" prop specifies the URL that the link should navigate to, and the \", _jsx(_components.strong, {\n        children: \"activeClassName\"\n      }), \" prop specifies the name of the CSS class that should be applied when the link is active.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, NavLink will match the current URL exactly to determine if it should be considered active. However, you can also customize this behavior using the \", _jsx(_components.strong, {\n        children: \"exact\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"strict\"\n      }), \" props.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, if you want NavLink to only match the current URL if it exactly matches the \", _jsx(_components.strong, {\n        children: \"to\"\n      }), \" prop, you can use the \", _jsx(_components.strong, {\n        children: \"exact\"\n      }), \" prop like this:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"NavLink\"\n          }), \" to\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"/about\\\"\"\n          }), \" activeClassName\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"active\\\"\"\n          }), \" exact\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"About\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"NavLink\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"And if you want NavLink to only match the current URL if it exactly matches the \", _jsx(_components.strong, {\n        children: \"to\"\n      }), \" prop \", _jsx(_components.strong, {\n        children: \"and\"\n      }), \" has no trailing slashes, you can use the \", _jsx(_components.strong, {\n        children: \"strict\"\n      }), \" prop like this:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"NavLink\"\n          }), \" to\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"/about\\\"\"\n          }), \" activeClassName\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"active\\\"\"\n          }), \" exact strict\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"About\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"NavLink\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Styling Active Links\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Once you've created your active NavLink, you'll likely want to style it differently from other links in your navigation menu. To do this, you can use the \", _jsx(_components.strong, {\n        children: \"activeClassName\"\n      }), \" prop to specify the name of a CSS class that should be applied to the active link.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, let's say you have a CSS class called \", _jsx(_components.strong, {\n        children: \"active-link\"\n      }), \" that you want to use to style your active links. Here's how you would use it with NavLink:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"NavLink\"\n          }), \" to\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"/about\\\"\"\n          }), \" activeClassName\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"active-link\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"About\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"/\"\n          }), _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"NavLink\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, the \", _jsx(_components.strong, {\n        children: \"activeClassName\"\n      }), \" prop specifies the name of the \", _jsx(_components.strong, {\n        children: \"active-link\"\n      }), \" CSS class that should be applied to the NavLink when it's active.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Best Practices for Using NavLink\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When using NavLink in your React projects, there are a few best practices you should keep in mind:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use a consistent \", _jsx(_components.strong, {\n          children: \"activeClassName\"\n        }), \" across all links in your navigation menu. This will help create a consistent user experience and make it clear which links are active.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.strong, {\n          children: \"exact\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"strict\"\n        }), \" props when appropriate. If you want NavLink to only match the current URL in a very specific way, using the \", _jsx(_components.strong, {\n          children: \"exact\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"strict\"\n        }), \" props can help ensure that it behaves as expected.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use descriptive \", _jsx(_components.strong, {\n          children: \"to\"\n        }), \" props. When creating NavLink components, make sure the \", _jsx(_components.strong, {\n          children: \"to\"\n        }), \" prop accurately reflects the URL of the page the user will be taken to. This will help ensure that the link is intuitive and easy to use.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Keep your navigation menu organized. Make sure your NavLink components are organized in a way that makes sense for your site or app. This will help ensure that users can quickly and easily find the pages they're looking for.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Test your navigation thoroughly. Make sure to test your navigation menu thoroughly to ensure that all NavLink components are working as expected. This will help ensure that users can navigate your site or app without any issues.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we've covered how to use the React Router NavLink component to create active links that visually indicate which page the user is currently on. We've also gone over some common use cases and best practices for using NavLink in your React projects.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By using NavLink to create active links, you can create a more intuitive and user-friendly navigation experience for your users. So next time you're building a React app, be sure to give NavLink a try!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Using React Router NavLink Component for Active Links","metaDesc":"When building a website or application with React, one of the key components you'll need is a navigation menu. And when it comes to navigation, one of the most important features is the ability to indicate which page the user is currently on. This is where the React Router NavLink component comes in.\n\nIn this article, we'll cover how to use the React Router NavLink component to create active links that visually indicate which page the user is currently on. We'll also go over some common use cases and best practices for using NavLink in your React projects.","tags":["React"],"slug":"using-react-router-nav-link-component-for-active-links","readTime":"5","img":"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}