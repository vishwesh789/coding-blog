{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    strong: \"strong\",\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: _jsx(_components.strong, {\n        children: \"Logistic Regression with Scikit-learn: A Beginner's Guide\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Logistic Regression is a statistical method that is used for modeling the relationship between a categorical dependent variable and one or more independent variables. It is commonly used in various fields such as medical research, social sciences, and economics to analyze and predict the outcome of a binary event, i.e., the event that can only have two outcomes.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we will discuss how to perform logistic regression using scikit-learn, a popular Python library for machine learning.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Scikit-learn?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Scikit-learn is an open-source machine learning library for Python. It provides a range of supervised and unsupervised learning algorithms for classification, regression, clustering, and dimensionality reduction. Scikit-learn is built on top of NumPy, SciPy, and matplotlib, which makes it a powerful and easy-to-use tool for data analysis and modeling.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Installing Scikit-learn\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we dive into the details of logistic regression with Scikit-learn, let's first install the library. You can use pip, the Python package installer, to install scikit-learn. Open your terminal or command prompt and enter the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"pip install scikit-learn\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you're using Anaconda, you can install scikit-learn by running the following command in your terminal:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"conda install scikit-learn\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Logistic Regression with Scikit-learn\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have scikit-learn installed, let's dive into how to perform logistic regression using this library. We will use the famous iris dataset, which contains the measurements of the sepal length, sepal width, petal length, and petal width for three different species of iris flowers.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Importing the Required Libraries\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, we need to import the required libraries. We will use pandas to load the dataset and numpy for some numerical operations.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" pandas \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" pd\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" numpy \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" np\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Loading the Dataset\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next, we will load the iris dataset using pandas. You can download the dataset from the \", _jsx(_components.a, {\n        href: \"https://archive.ics.uci.edu/ml/datasets/iris\",\n        children: \"UCI Machine Learning Repository\"\n      }), \". Alternatively, you can use the following code to load the dataset directly from scikit-learn:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" sklearn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"datasets \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" load_iris\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"iris \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" load_iris\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Preparing the Data\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we can train our logistic regression model, we need to prepare the data. We will split the dataset into training and testing sets and encode the target variable into binary values.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" sklearn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"model_selection \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" train_test_split\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" sklearn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"preprocessing \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" LabelBinarizer\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"X \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" iris\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"data\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"y \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" iris\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"target\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# split the data into training and testing sets\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"X_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" X_test\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_test \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" train_test_split\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"X\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" test_size\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" random_state\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# encode the target variable into binary values\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"lb \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" LabelBinarizer\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"y_train \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" lb\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"fit_transform\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"y_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"y_test \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" lb\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"fit_transform\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"y_test\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Training the Model\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, we can train our logistic regression model using scikit-learn. We will use the LogisticRegression class to create an instance of the model and then fit it to our training data.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" sklearn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"linear_model \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" LogisticRegression\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# create an instance of the model\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"lr \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" LogisticRegression\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# fit the model to the training data\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"lr\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"fit\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"X_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_train\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Making Predictions\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once we have trained our logistic regression model, we can use it to make predictions on new data. We will use the predict method of the model to predict the class of the test data.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# predict the class of the test data\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"y_pred \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" lr\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"predict\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"X_test\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Evaluating the Model\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To evaluate the performance of our logistic regression model, we will calculate the accuracy score and the confusion matrix. The accuracy score measures the proportion of correct predictions, while the confusion matrix shows the number of true and false positives and negatives.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" sklearn\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"metrics \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" accuracy_score\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" confusion_matrix\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# calculate the accuracy score\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"accuracy \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" accuracy_score\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"y_test\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_pred\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Accuracy: {:.2f}%\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"format\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"accuracy\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"100\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# calculate the confusion matrix\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"cm \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" confusion_matrix\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"y_test\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"argmax\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"axis\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_pred\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"argmax\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"axis\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Confusion Matrix:\\\\n\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" cm\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The output should look like this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Accuracy: 96.67%\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Confusion Matrix:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \" [[11  0  0]\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  [ 0 13  1]\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  [ 0  0  5]]\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.strong, {\n        children: \"Visualizing the Results\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To visualize the results of our logistic regression model, we will use a scatter plot to show the distribution of the iris flowers in the feature space, and we will add the decision boundary of the model to the plot.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" matplotlib\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"pyplot \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"as\"\n          }), \" plt\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# create a meshgrid of the feature space\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"x_min\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" x_max \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" X\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"min\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.5\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" X\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"max\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.5\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"y_min\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_max \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" X\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"min\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.5\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" X\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token builtin\",\n            children: \"max\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.5\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"xx\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" yy \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" np\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"meshgrid\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"np\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"arange\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"x_min\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" x_max\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.01\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" np\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"arange\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"y_min\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" y_max\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.01\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# predict the class of the meshgrid points\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"Z \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" lr\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"predict\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"np\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"c_\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"xx\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"ravel\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" yy\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"ravel\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"Z \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" Z\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"reshape\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"xx\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"shape\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# plot the scatter plot of the iris data\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"scatter\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"X\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" X\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" c\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \"y\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"xlabel\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Sepal length'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"ylabel\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Sepal width'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"title\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Scatter Plot of Iris Data'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token comment\",\n            children: \"# plot the decision boundary of the logistic regression model\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"contourf\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"xx\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" yy\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" Z\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" alpha\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0.3\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" cmap\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"cm\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"RdBu\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"plt\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"show\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The scatter plot of iris data shows the distribution of the iris flowers in the feature space, where the x-axis represents the sepal length and the y-axis represents the sepal width. Each point in the plot represents an iris flower, and the color of the point indicates its class label (setosa, versicolor, or virginica).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The decision boundary of the logistic regression model is shown as a contour plot, which separates the feature space into two regions, one for each class label. The contour plot is drawn with a red-blue color map, where blue represents the region for class 0 (setosa), and red represents the region for class 1 (versicolor and virginica).\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Logistic regression is a powerful and widely used statistical method for analyzing and predicting the outcome of a binary event. Scikit-learn is a popular Python library for machine learning that provides a range of supervised and unsupervised learning algorithms, including logistic regression.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we have discussed how to perform logistic regression using scikit-learn, and we have used the iris dataset to illustrate the process. We have also shown how to evaluate the performance of the model and visualize the results using a scatter plot and a decision boundary.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you are new to machine learning, logistic regression with scikit-learn is a great place to start. With a basic understanding of Python and some programming experience, you can easily get started with this powerful method and start exploring the world of machine learning.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Logistic Regression with Scikit-learn: A Beginner's Guide","metaDesc":"Logistic Regression is a statistical method that is used for modeling the relationship between a categorical dependent variable and one or more independent variables. It is commonly used in various fields such as medical research, social sciences, and economics to analyze and predict the outcome of a binary event, i.e., the event that can only have two outcomes.\n\nIn this article, we will discuss how to perform logistic regression using scikit-learn, a popular Python library for machine learning.","tags":["Logistic Regression with Scikit-learn"],"slug":"logistic-regression-with-scikit-learn-a-beginner-s-guide","readTime":5,"img":"https://images.pexels.com/photos/574073/pexels-photo-574073.jpeg","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}