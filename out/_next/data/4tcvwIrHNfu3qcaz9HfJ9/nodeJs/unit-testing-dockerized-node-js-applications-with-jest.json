{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Testing is an essential part of developing any software application, including Node.js applications. In this article, we will explore how to unit test a Dockerized Node.js application using the Jest testing framework.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"What is Unit Testing?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Unit testing is a software testing method in which individual units or components of a software application are tested in isolation from the rest of the application. The goal of unit testing is to verify that each unit or component of the application works as expected.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Why Unit Test Dockerized Node.js Applications?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Docker is a popular containerization technology that allows developers to package applications and their dependencies into lightweight containers. Dockerizing a Node.js application makes it more portable and easier to deploy. However, unit testing Dockerized Node.js applications can be challenging, as the application is running inside a container.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Unit testing Dockerized Node.js applications is important because it helps ensure that the application is working correctly before deploying it to production. Unit tests also help identify and fix bugs early in the development process, which saves time and reduces the risk of introducing bugs into the application.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Setting Up a Dockerized Node.js Application\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To follow along with this tutorial, you will need to have Node.js and Docker installed on your computer. You can download Node.js from the official Node.js website (\", _jsx(_components.a, {\n        href: \"https://nodejs.org/\",\n        children: \"https://nodejs.org/\"\n      }), \") and Docker from the official Docker website (\", _jsx(_components.a, {\n        href: \"https://www.docker.com/\",\n        children: \"https://www.docker.com/\"\n      }), \").\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We will start by creating a simple Node.js application that we will later Dockerize and unit test. Create a new directory and navigate to it in your terminal. Run the following command to initialize a new Node.js project:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"npm init\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Follow the prompts to initialize the project. Once the project is initialized, create a new file named \", _jsx(_components.strong, {\n        children: \"app.js\"\n      }), \". This will be the main file for our application. Add the following code to the \", _jsx(_components.strong, {\n        children: \"app.js\"\n      }), \" file:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"sum\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsxs(_components.span, {\n            className: \"token parameter\",\n            children: [\"a\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" b\"]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" a \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" b\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"module\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"exports\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" sum\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is a simple function that takes two arguments and returns their sum. We will use this function to demonstrate unit testing.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a new file named \", _jsx(_components.strong, {\n        children: \"test.js\"\n      }), \". This will be our unit test file. Add the following code to the \", _jsx(_components.strong, {\n        children: \"test.js\"\n      }), \" file:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-javascript\",\n      children: _jsxs(_components.code, {\n        className: \"language-javascript\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"const\"\n          }), \" sum \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"require\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'./app'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"test\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'adds 1 + 2 to equal 3'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token arrow operator\",\n            children: \"=>\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"expect\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"sum\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"toBe\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is a simple unit test that tests the \", _jsx(_components.strong, {\n        children: \"sum\"\n      }), \" function we created earlier. It expects the sum of \", _jsx(_components.strong, {\n        children: \"1\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"2\"\n      }), \" to be \", _jsx(_components.strong, {\n        children: \"3\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Run the following command to install the Jest testing framework:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"npm install jest --save-dev\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will install the Jest testing framework as a development dependency.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, we are ready to run our unit tests. Run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"npm test\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will run all the tests in the \", _jsx(_components.strong, {\n        children: \"test.js\"\n      }), \" file. You should see the following output:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"PASS  ./test.js\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  ✓ adds 1 + 2 to equal 3 (3 ms)\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Test Suites: 1 passed, 1 total\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Tests:       1 passed, 1 total\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Snapshots:   0 total\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Time:        0.642 s\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Ran all test suites.\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Congratulations! You have successfully set up a Node.js application and written a unit test for it using the Jest testing framework.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Dockerizing the Node.js Application\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have a working Node.js application and a unit test, we can Dockerize the application. Dockerizing a Node.js application involves creating a Docker image that contains the application code and its dependencies.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a new file named \", _jsx(_components.strong, {\n        children: \"Dockerfile\"\n      }), \" in the root directory of your project. Add the following code to the \", _jsx(_components.strong, {\n        children: \"Dockerfile\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Use an official Node.js runtime as a parent image\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"FROM node:14-alpine\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Set the working directory in the container to /app\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"WORKDIR /app\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Copy the package.json and package-lock.json files to the container\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"COPY package*.json ./\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Install the dependencies in the container\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"RUN npm install\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Copy the rest of the application files to the container\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"COPY . .\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Set the command to run the application\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"CMD [\\\"npm\\\", \\\"start\\\"]\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This \", _jsx(_components.strong, {\n        children: \"Dockerfile\"\n      }), \" sets up a Node.js runtime environment, installs the application dependencies, and sets the command to run the application.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To build the Docker image, run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker build -t my-node-app .\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will build a Docker image named \", _jsx(_components.strong, {\n        children: \"my-node-app\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To run the Docker image, run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker run -p 3000:3000 my-node-app\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will start the Docker container and expose port \", _jsx(_components.strong, {\n        children: \"3000\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Unit Testing Dockerized Node.js Applications\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that we have Dockerized our Node.js application, we can unit test it using the Jest testing framework. To run the unit tests inside the Docker container, we need to modify the \", _jsx(_components.strong, {\n        children: \"Dockerfile\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Add the following code to the \", _jsx(_components.strong, {\n        children: \"Dockerfile\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Use an official Node.js runtime as a parent image\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"FROM node:14-alpine\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Set the working directory in the container to /app\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"WORKDIR /app\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Copy the package.json and package-lock.json files to the container\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"COPY package*.json ./\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Install the dependencies in the container\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"RUN npm install\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Copy the rest of the application files to the container\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"COPY . .\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"# Run the unit tests in the container\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"CMD [\\\"npm\\\", \\\"test\\\"]\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This \", _jsx(_components.strong, {\n        children: \"Dockerfile\"\n      }), \" sets up the Node.js runtime environment, installs the application dependencies, copies the application files to the container, and runs the unit tests inside the container.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To build the Docker image with the unit tests, run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker build -t my-node-app-test .\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will build a Docker image named \", _jsx(_components.strong, {\n        children: \"my-node-app-test\"\n      }), \" with the unit tests.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To run the unit tests inside the Docker container, run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"docker run my-node-app-test\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will run the unit tests inside the Docker container and display the test results in the console.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Congratulations! You have successfully Dockerized a Node.js application and unit tested it using the Jest testing framework inside a Docker container.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Unit testing is an essential part of developing any software application, including Dockerized Node.js applications. In this article, we explored how to unit test a Dockerized Node.js application using the Jest testing framework. We also learned how to Dockerize a Node.js application and run the unit tests inside a Docker container. By following these best practices, you can ensure that your Dockerized Node.js applications are working correctly before deploying them to production.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Unit Testing Dockerized Node.js Applications with Jest","metaDesc":"Testing is an essential part of developing any software application, including Node.js applications. In this article, we will explore how to unit test a Dockerized Node.js application using the Jest testing framework.","tags":["node js"],"slug":"unit-testing-dockerized-node-js-applications-with-jest","readTime":5,"img":"https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}