{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"If you are a web developer looking to build a Node.js application that requires database functionality, MongoDB is a popular choice. MongoDB is a NoSQL database that stores data in JSON-like documents, making it a flexible and scalable option for modern web applications.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this tutorial, we will walk through the basic CRUD (Create, Read, Update, Delete) operations in MongoDB using Node.js. We will cover how to connect to a MongoDB database, create documents, retrieve documents, update documents, and delete documents.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Prerequisites\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we dive into the tutorial, make sure you have the following installed:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Node.js (version 10 or higher)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"MongoDB (version 4.0 or higher)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You will also need to have a basic understanding of JavaScript and Node.js.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 1: Set Up a MongoDB Database\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, let's set up a MongoDB database. Open a terminal and start the MongoDB server by running the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"mongod\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next, open another terminal window and run the following command to connect to the MongoDB shell:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"mongo\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we are in the MongoDB shell, let's create a new database:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"use mydb\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will create a new database called \", _jsx(_components.strong, {\n        children: \"mydb\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 2: Connect to the MongoDB Database in Node.js\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that we have a MongoDB database set up, let's connect to it in Node.js. Create a new directory for your project and navigate into it:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"mkdir myproject\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"cd myproject\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next, initialize a new Node.js project using the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"npm init\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will create a new \", _jsx(_components.strong, {\n        children: \"package.json\"\n      }), \" file in your project directory.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now, let's install the \", _jsx(_components.strong, {\n        children: \"mongodb\"\n      }), \" package using npm:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"npm install mongodb\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will install the \", _jsx(_components.strong, {\n        children: \"mongodb\"\n      }), \" package and add it to your \", _jsx(_components.strong, {\n        children: \"package.json\"\n      }), \" file as a dependency.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next, create a new file called \", _jsx(_components.strong, {\n        children: \"app.js\"\n      }), \" in your project directory and add the following code to it:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const MongoClient = require('mongodb').MongoClient;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const url = 'mongodb://localhost:27017/mydb';\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"MongoClient.connect(url, (err, client) => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  if (err) throw err;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const db = client.db('mydb');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  // perform database operations here\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  client.close();\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"});\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code connects to the \", _jsx(_components.strong, {\n        children: \"mydb\"\n      }), \" database on your local MongoDB server. The \", _jsx(_components.strong, {\n        children: \"MongoClient\"\n      }), \" object is used to connect to the database and the \", _jsx(_components.strong, {\n        children: \"db\"\n      }), \" object is used to perform database operations.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 3: Create Documents in MongoDB\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that we have connected to the MongoDB database in Node.js, let's create some documents. Add the following code to your \", _jsx(_components.strong, {\n        children: \"app.js\"\n      }), \" file:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const MongoClient = require('mongodb').MongoClient;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const url = 'mongodb://localhost:27017/mydb';\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"MongoClient.connect(url, (err, client) => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  if (err) throw err;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const db = client.db('mydb');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const collection = db.collection('users');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const user = { name: 'John Doe', email: 'johndoe@example.com' };\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  collection.insertOne(user, (err, result) => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    if (err) throw err;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    console.log(`Inserted ${result.insertedCount} document`);\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    client.close();\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  });\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"});\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code creates a new \", _jsx(_components.strong, {\n        children: \"users\"\n      }), \" collection in the \", _jsx(_components.strong, {\n        children: \"mydb\"\n      }), \" database and inserts a new user document with a name and email field.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 4: Retrieve Documents in MongoDB\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that we have created some documents in MongoDB, let's retrieve them using Node.js. Add the following code to your \", _jsx(_components.strong, {\n        children: \"app.js\"\n      }), \" file:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const MongoClient = require('mongodb').MongoClient;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const url = 'mongodb://localhost:27017/mydb';\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"MongoClient.connect(url, (err, client) => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  if (err) throw err;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const db = client.db('mydb');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const collection = db.collection('users');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  collection.find({}).toArray((err, docs) => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    if (err) throw err;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    console.log(`Found ${docs.length} documents`);\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    docs.forEach((doc) => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"      console.log(doc);\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    });\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    client.close();\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  });\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"});\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code retrieves all documents in the \", _jsx(_components.strong, {\n        children: \"users\"\n      }), \" collection and logs them to the console.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 5: Update Documents in MongoDB\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that we know how to create and retrieve documents in MongoDB, let's learn how to update them. Add the following code to your \", _jsx(_components.strong, {\n        children: \"app.js\"\n      }), \" file:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const MongoClient = require('mongodb').MongoClient;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const url = 'mongodb://localhost:27017/mydb';\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"MongoClient.connect(url, (err, client) => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  if (err) throw err;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const db = client.db('mydb');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const collection = db.collection('users');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const filter = { email: 'johndoe@example.com' };\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const update = { $set: { name: 'Jane Doe' } };\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  collection.updateOne(filter, update, (err, result) => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    if (err) throw err;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    console.log(`Updated ${result.modifiedCount} document`);\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    client.close();\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  });\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"});\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code updates the \", _jsx(_components.strong, {\n        children: \"name\"\n      }), \" field of the document with the email \", _jsx(_components.strong, {\n        children: \"johndoe@example.com\"\n      }), \" to \", _jsx(_components.strong, {\n        children: \"Jane Doe\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Step 6: Delete Documents in MongoDB\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Finally, let's learn how to delete documents in MongoDB. Add the following code to your \", _jsx(_components.strong, {\n        children: \"app.js\"\n      }), \" file:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const MongoClient = require('mongodb').MongoClient;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"const url = 'mongodb://localhost:27017/mydb';\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"MongoClient.connect(url, (err, client) => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  if (err) throw err;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const db = client.db('mydb');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const collection = db.collection('users');\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  const filter = { email: 'johndoe@example.com' };\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  collection.deleteOne(filter, (err, result) => {\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    if (err) throw err;\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    console.log(`Deleted ${result.deletedCount} document`);\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    client.close();\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"  });\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"});\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code deletes the document with the email \", _jsx(_components.strong, {\n        children: \"johndoe@example.com\"\n      }), \" from the \", _jsx(_components.strong, {\n        children: \"users\"\n      }), \" collection.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this tutorial, we have covered the basic CRUD operations in MongoDB using Node.js. We have learned how to connect to a MongoDB database, create documents, retrieve documents, update documents, and delete documents. With this knowledge, you can start building powerful Node.js applications that leverage the flexibility and scalability of MongoDB.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Node.js MongoDB CRUD Operations: A Step-by-Step Guide","metaDesc":"If you are a web developer looking to build a Node.js application that requires database functionality, MongoDB is a popular choice. MongoDB is a NoSQL database that stores data in JSON-like documents, making it a flexible and scalable option for modern web applications.\n\nIn this tutorial, we will walk through the basic CRUD (Create, Read, Update, Delete) operations in MongoDB using Node.js. We will cover how to connect to a MongoDB database, create documents, retrieve documents, update documents, and delete documents.","tags":["node js"],"slug":"node-js-mongo-db-crud-operations-a-step-by-step-guide","readTime":4,"img":"https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}