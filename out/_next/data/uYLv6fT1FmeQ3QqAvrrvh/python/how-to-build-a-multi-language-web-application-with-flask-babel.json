{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Building a web application that supports multiple languages can be a challenging task. However, with Flask-Babel, the process is much easier. Flask-Babel is a Flask extension that allows you to internationalize your web application, making it accessible to users all over the world. In this article, we'll take a look at how to use Flask-Babel to build a multi-language web application.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Prerequisites\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we begin, you should have some basic knowledge of Flask and Python. You should also have Flask-Babel installed in your virtual environment. If you haven't already done so, you can install it by running the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsx(_components.code, {\n        className: \"language-plaintext\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"pip install Flask-Babel\\n\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Setting Up Flask-Babel\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Once you have Flask-Babel installed, the first thing you need to do is initialize it in your Flask application. To do this, create a new file called \", _jsx(_components.strong, {\n        children: \"babel.py\"\n      }), \" in the root directory of your application and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" flask_babel \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" Babel\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"babel \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" Babel\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will initialize Flask-Babel and create a new instance of the \", _jsx(_components.strong, {\n        children: \"Babel\"\n      }), \" class.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next, you need to configure Flask-Babel to use the languages you want to support. To do this, add the following code to your \", _jsx(_components.strong, {\n        children: \"babel.py\"\n      }), \" file:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"LANGUAGES \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'en'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'English'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'fr'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'French'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'es'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Spanish'\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"configure\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"app\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    babel\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"init_app\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"app\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    app\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"config\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'LANGUAGES'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" LANGUAGES\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code defines a dictionary of languages that you want to support and a \", _jsx(_components.strong, {\n        children: \"configure\"\n      }), \" function that initializes Flask-Babel and sets the \", _jsx(_components.strong, {\n        children: \"LANGUAGES\"\n      }), \" configuration parameter.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Finally, you need to import and call the \", _jsx(_components.strong, {\n        children: \"configure\"\n      }), \" function in your Flask application:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" babel \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" configure\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" flask \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" Flask\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"app \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" Flask\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"__name__\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"configure\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"app\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Translating Your Application\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that Flask-Babel is set up, you can start translating your application. To do this, you need to wrap all the strings that need to be translated with the \", _jsx(_components.strong, {\n        children: \"gettext\"\n      }), \" function. For example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" flask_babel \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" gettext\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token decorator annotation punctuation\",\n            children: [\"@app\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \".\"\n            }), \"route\"]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'/'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"index\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" gettext\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'Hello, world!'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code uses the \", _jsx(_components.strong, {\n        children: \"gettext\"\n      }), \" function to translate the string \\\"Hello, world!\\\" into the user's language.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Adding Translations\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add translations for a specific language, you need to create a new translation file. For example, to add translations for French, create a new file called \", _jsx(_components.strong, {\n        children: \"messages.fr.po\"\n      }), \" in the \", _jsx(_components.strong, {\n        children: \"translations\"\n      }), \" directory of your application. This file should contain the translated strings for your application in the \", _jsx(_components.strong, {\n        children: \"msgid\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"msgstr\"\n      }), \" format:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-plaintext\",\n      children: _jsxs(_components.code, {\n        className: \"language-plaintext\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"msgid \\\"Hello, world!\\\"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"msgstr \\\"Bonjour, le monde!\\\"\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This code translates the string \\\"Hello, world!\\\" into French as \\\"Bonjour, le monde!\\\".\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Switching Languages\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To allow users to switch between languages, you need to add a language selector to your application. To do this, create a new route that sets the user's language preference in a cookie:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"from\"\n          }), \" flask \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"import\"\n          }), \" redirect\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" request\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" make_response\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token decorator annotation punctuation\",\n            children: [\"@app\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \".\"\n            }), \"route\"]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'/language/<language>'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"set_language\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"language\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"None\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    response \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" make_response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"redirect\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"request\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"referrer \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"or\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'/'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    response\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"set_cookie\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'lang'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" language\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" response\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code creates a new route that sets a cookie called \", _jsx(_components.strong, {\n        children: \"lang\"\n      }), \" to the user's language preference.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next, you need to modify your \", _jsx(_components.strong, {\n        children: \"configure\"\n      }), \" function to read the user's language preference from the cookie:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-python\",\n      children: _jsxs(_components.code, {\n        className: \"language-python\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"configure\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"app\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    babel\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"init_app\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"app\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    app\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"config\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'LANGUAGES'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" LANGUAGES\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    \\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsxs(_components.span, {\n            className: \"token decorator annotation punctuation\",\n            children: [\"@babel\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \".\"\n            }), \"localeselector\"]\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"def\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"get_locale\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" request\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"cookies\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"get\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'lang'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'en'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This code adds a \", _jsx(_components.strong, {\n        children: \"localeselector\"\n      }), \" to the \", _jsx(_components.strong, {\n        children: \"Babel\"\n      }), \" instance that reads the user's language preference from the \", _jsx(_components.strong, {\n        children: \"lang\"\n      }), \" cookie. If the cookie is not set, it defaults to English.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we have learned how to build a multi-language web application with Flask-Babel. We covered the basics of setting up Flask-Babel, translating your application, and adding language support. We also learned how to switch between languages using cookies.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Flask-Babel is a powerful tool that makes it easy to internationalize your web application. With its simple API and intuitive syntax, you can easily build a web application that is accessible to users all over the world.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"How to Build a Multi-Language Web Application with Flask-Babel","metaDesc":"Building a web application that supports multiple languages can be a challenging task. However, with Flask-Babel, the process is much easier. Flask-Babel is a Flask extension that allows you to internationalize your web application, making it accessible to users all over the world. In this article, we'll take a look at how to use Flask-Babel to build a multi-language web application.","tags":["Flask-Babel"],"slug":"how-to-build-a-multi-language-web-application-with-flask-babel","readTime":3,"img":"https://images.pexels.com/photos/1181278/pexels-photo-1181278.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","author":{"data":{"id":1,"attributes":{"username":"vishwesh","email":"vishwesh.singh1991@gmail.com","provider":"local","confirmed":false,"blocked":false,"createdAt":"2023-04-30T11:12:14.071Z","updatedAt":"2023-04-30T11:12:14.071Z"}}}},"__N_SSG":true}