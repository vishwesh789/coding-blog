(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[114],{3055:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/reactjs/[react]",function(){return a(316)}])},316:function(e,t,a){"use strict";a.r(t),a.d(t,{__N_SSG:function(){return b},default:function(){return y}});var s=a(5893),o=a(5675),i=a.n(o),n=a(1664),r=a.n(n),c=a(235),p=a(9008),l=a.n(p),m=a(1818),d=a(8949),h=a(5554),u=a(7294),g=a(3305);let w=[{id:1,createdAt:"2023-05-06T20:46:14.411Z",updatedAt:"2023-05-06T21:26:52.916Z",publishedAt:"2023-05-06T21:26:52.914Z",title:"How to Create Reusable Components in React Functional Component",slug:"how-to-create-reusable-components-in-react-functional-component",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["Reusable Components in React"],readTime:"4",metaDesc:"React is a popular JavaScript library for building web applications. It provides developers with the ability to create reusable components, which can significantly reduce development time and improve the overall efficiency of a project. In this tutorial, we will look at how to create reusable components in React functional components.\n\n"},{id:2,createdAt:"2023-05-06T21:47:52.889Z",updatedAt:"2023-05-06T21:47:54.284Z",publishedAt:"2023-05-06T21:47:54.282Z",title:"React Functional Components vs. Class Components",slug:"react-functional-components-vs-class-components",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React js"],readTime:"4",metaDesc:"When working with React, there are two primary ways of creating components: functional components and class components. Both approaches have their pros and cons, and which one you choose depends on your project's specific requirements. In this article, we'll explore the differences between functional components and class components, and discuss when to use each one."},{id:3,createdAt:"2023-05-06T22:03:40.952Z",updatedAt:"2023-05-06T22:12:22.193Z",publishedAt:"2023-05-06T22:04:37.582Z",title:"Converting React Class Components to Functional Components",slug:"converting-react-class-components-to-functional-components",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React"],readTime:"5",metaDesc:"React functional components offer several advantages over class components, including improved performance and code simplicity. In this article, we'll explore how to convert class components to functional components using a step-by-step process."},{id:4,createdAt:"2023-05-06T22:22:13.934Z",updatedAt:"2023-05-06T22:22:22.391Z",publishedAt:"2023-05-06T22:22:22.388Z",title:"Understanding the Component Lifecycle Methods in React Class components",slug:"understanding-the-component-lifecycle-methods-in-react-class-components",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React js"],readTime:"5",metaDesc:"React is a popular JavaScript library used for building user interfaces. One of the key features of React is its component-based architecture, which allows developers to create reusable UI elements. When building React components, it's important to understand the component lifecycle methods, which are a series of methods that are called at different stages of a component's life.\n\nIn this article, we'll take a deep dive into the component lifecycle methods in React, starting with an overview of the different stages of a component's life."},{id:5,createdAt:"2023-05-06T23:17:03.596Z",updatedAt:"2023-05-07T04:38:25.767Z",publishedAt:"2023-05-07T04:38:25.760Z",title:"How to pass props between React components",slug:"how-to-pass-props-between-react-components",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["pass props between React components"],readTime:"4",metaDesc:"React is a popular library for building dynamic user interfaces. One of the key features of React is its component-based architecture. React components are reusable, encapsulated pieces of code that can be composed together to build complex UIs. In this article, we will explore how to pass data between React components using props."},{id:6,createdAt:"2023-05-06T23:18:38.023Z",updatedAt:"2023-05-07T04:39:15.814Z",publishedAt:"2023-05-07T04:39:15.812Z",title:"Passing Props between React Components",slug:"passing-props-between-react-components",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React"],readTime:"3",metaDesc:"If you're new to React, you may have heard of \"props\" and wondered what they are and how they work. Props, short for properties, are a way to pass data from one component to another in a React application. In this article, we'll explore how to pass props between React components, and why they are important."},{id:7,createdAt:"2023-05-06T23:21:41.910Z",updatedAt:"2023-05-07T04:39:35.044Z",publishedAt:"2023-05-07T04:39:35.042Z",title:"React Presentational vs. Container components: Which to choose?",slug:"react-presentational-vs-container-components-which-to-choose",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React Presentational vs. Container components"],readTime:"4",metaDesc:"When building complex React applications, it's important to organize components in a way that maximizes code reusability and maintainability. One common approach is to use presentational and container components.\n\nPresentational components are responsible for rendering UI elements, while container components handle data and application logic. By separating these concerns, we can create a clear separation of concerns and keep our codebase clean and easy to understand.\n\nIn this article, we'll explore the differences between presentational and container components, and discuss when and why to use each.\n\n"},{id:8,createdAt:"2023-05-06T23:24:03.049Z",updatedAt:"2023-05-07T04:39:53.924Z",publishedAt:"2023-05-07T04:39:53.921Z",title:"How to Compose React Components Effectively",slug:"how-to-compose-react-components-effectively",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["Compose React Components"],readTime:"4",metaDesc:"React is a popular JavaScript library that allows developers to build user interfaces in a declarative and efficient way. One of the key features of React is its ability to compose reusable components, which can greatly simplify the process of building complex UIs. In this article, we will explore some tips and best practices for composing React components effectively."},{id:9,createdAt:"2023-05-06T23:27:54.024Z",updatedAt:"2023-05-07T04:40:17.910Z",publishedAt:"2023-05-07T04:40:17.908Z",title:"React Inheritance vs. Composition: Which is better?",slug:"react-inheritance-vs-composition-which-is-better",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React Inheritance vs. Composition"],readTime:"5",metaDesc:"React is a popular JavaScript library used for building user interfaces. It has gained immense popularity because of its simplicity, flexibility, and performance. When it comes to building components in React, there are two popular approaches: Inheritance and Composition. In this article, we'll explore the differences between these two approaches and try to find out which one is better."},{id:10,createdAt:"2023-05-06T23:33:16.175Z",updatedAt:"2023-05-07T04:40:38.051Z",publishedAt:"2023-05-07T04:40:38.049Z",title:"How to Use React Fragments in Your Components",slug:"how-to-use-react-fragments-in-your-components",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React Fragments"],readTime:"4",metaDesc:"React is a popular JavaScript library used for building user interfaces. One of its features is the ability to use fragments, which are a way to group multiple elements together without adding extra nodes to the DOM. This can help improve performance and make your code more readable.\n\nIn this article, we will explain what React fragments are and how you can use them in your components. We will also discuss some best practices to follow when working with fragments."},{id:11,createdAt:"2023-05-06T23:36:40.171Z",updatedAt:"2023-05-07T04:40:56.852Z",publishedAt:"2023-05-07T04:40:56.850Z",title:"Tips for Optimizing React Rendering Performance with Components",slug:"tips-for-optimizing-react-rendering-performance-with-components",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["Optimizing React Rendering Performance"],readTime:"5",metaDesc:"React is a popular JavaScript library that enables developers to build interactive user interfaces. As a developer, it is essential to optimize the rendering performance of React components to ensure a smooth and seamless user experience. In this article, we will discuss some tips for optimizing React rendering performance with components."},{id:12,createdAt:"2023-05-06T23:42:54.145Z",updatedAt:"2023-05-07T04:41:23.335Z",publishedAt:"2023-05-07T04:41:23.333Z",title:"Using React setState Method for State Management",slug:"using-react-set-state-method-for-state-management",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React setState Method "],readTime:"4",metaDesc:"React is a popular JavaScript library used for building user interfaces. One of the core features of React is its ability to manage state, which refers to the data that determines how a component should behave and render. In this article, we will explore how to use the setState method in React to manage state."},{id:13,createdAt:"2023-05-06T23:49:44.913Z",updatedAt:"2023-05-07T04:42:03.292Z",publishedAt:"2023-05-07T04:42:03.291Z",title:"Why and How to Use React Context API for State Management",slug:"why-and-how-to-use-react-context-api-for-state-management",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React"],readTime:"5",metaDesc:"State management is a fundamental concept in React, which is a JavaScript library used for building user interfaces. State refers to the data that changes in a component and affects its rendering. As an application grows in complexity, state management can become a challenging task. One way to manage state effectively is by using the React Context API.\n\nIn this article, we will explore why and how to use the React Context API for state management in a React application."},{id:14,createdAt:"2023-05-06T23:56:29.247Z",updatedAt:"2023-05-07T04:43:18.338Z",publishedAt:"2023-05-07T04:43:18.335Z",title:"Introduction to Redux for State Management in React",slug:"introduction-to-redux-for-state-management-in-react",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["Redux for State Management in React"],readTime:"7",metaDesc:"If you've been working with React for a while, you know how difficult it can be to manage the state of your application. React provides some tools to help with this, but as your application grows in size and complexity, these tools can become inadequate.\n\nThis is where Redux comes in. Redux is a state management library that is designed to work with React (and other frameworks) to make managing state easier and more predictable. In this article, we'll take a closer look at Redux and how it can help you manage state in your React applications."},{id:15,createdAt:"2023-05-07T00:12:46.312Z",updatedAt:"2023-05-07T04:51:21.939Z",publishedAt:"2023-05-07T04:43:47.924Z",title:"How to Use MobX for State Management in React",slug:"how-to-use-mob-x-for-state-management-in-react",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["MobX for State Management in React"],readTime:"4",metaDesc:"When building applications with React, managing state can quickly become a complex and time-consuming task. Luckily, there are many libraries available to help simplify this process. One of the most popular libraries for state management in React is MobX.\n\nIn this article, we will explore what MobX is, how it works, and how you can use it to manage state in your React applications."},{id:16,createdAt:"2023-05-07T00:18:00.719Z",updatedAt:"2023-05-07T04:44:13.116Z",publishedAt:"2023-05-07T04:44:13.115Z",title:"Understanding Flux Architecture for State Management in React",slug:"understanding-flux-architecture-for-state-management-in-react",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["Flux Architecture in React"],readTime:"6",metaDesc:"React is a popular JavaScript library for building user interfaces, and it has gained a lot of popularity in recent years. As your React applications grow in size, managing state becomes increasingly complex. This is where Flux architecture comes into play. Flux is a pattern that provides a way to manage data flow in React applications, making it easier to reason about and maintain the state of your application. In this article, we will dive into the basics of Flux architecture and how it can help in state management in React."},{id:17,createdAt:"2023-05-07T00:20:41.186Z",updatedAt:"2023-05-07T04:45:19.372Z",publishedAt:"2023-05-07T04:45:19.370Z",title:"Using Immutable.js with React for Immutable State Management",slug:"using-immutable-js-with-react-for-immutable-state-management",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["Using Immutable.js with React"],readTime:"5",metaDesc:"When building web applications, managing state is a crucial part of the process. State management can be a difficult and error-prone task, especially when dealing with complex applications with multiple components. One popular solution to this problem is to use immutable data structures. Immutable data structures ensure that data cannot be changed once it is created, which leads to better predictability and fewer bugs. In this article, we will explore how to use Immutable.js with React to manage immutable state in our applications."},{id:18,createdAt:"2023-05-07T02:22:30.709Z",updatedAt:"2023-05-07T04:45:40.251Z",publishedAt:"2023-05-07T04:45:40.250Z",title:"Exploring the React useReducer Hook for State Management",slug:"exploring-the-react-use-reducer-hook-for-state-management",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React"],readTime:"5",metaDesc:"Managing state in React can be a challenging task, especially when dealing with complex applications. The useReducer hook is one of the tools that can help simplify state management and make it more manageable. In this article, we will explore the useReducer hook and see how it can be used to manage state in a React application."},{id:19,createdAt:"2023-05-07T02:29:34.882Z",updatedAt:"2023-05-07T04:46:13.668Z",publishedAt:"2023-05-07T04:46:13.666Z",title:"Comparison of React Stateful vs. Stateless Components",slug:"comparison-of-react-stateful-vs-stateless-components",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React"],readTime:"4",metaDesc:"React is a popular front-end JavaScript library that provides developers with the ability to create complex, dynamic user interfaces with ease. In React, components are the building blocks of any application. There are two types of components in React: stateful and stateless. In this article, we will compare the two types of components and discuss their differences, advantages, and disadvantages."},{id:20,createdAt:"2023-05-07T02:35:29.834Z",updatedAt:"2023-05-07T04:47:06.522Z",publishedAt:"2023-05-07T04:47:06.520Z",title:"How to Synchronize State Between React Components",slug:"how-to-synchronize-state-between-react-components",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React"],readTime:"5",metaDesc:"React is a popular JavaScript library used for building user interfaces. One of the key features of React is its ability to manage state, which allows for dynamic, interactive components. However, when working with multiple components that need to share the same state, it can become challenging to keep everything in sync. In this article, we will explore different ways to synchronize state between React components."},{id:21,createdAt:"2023-05-07T02:37:08.790Z",updatedAt:"2023-05-07T04:47:34.496Z",publishedAt:"2023-05-07T04:47:34.495Z",title:"Best Practices for React State Management",slug:"best-practices-for-react-state-management",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React"],readTime:"6",metaDesc:"React is a popular JavaScript library used for building dynamic user interfaces. State management is a crucial aspect of any React application as it enables developers to manage the data and state of their applications. In this article, we will discuss the best practices for React state management that every beginner should know."},{id:22,createdAt:"2023-05-07T02:50:36.702Z",updatedAt:"2023-05-07T04:47:55.469Z",publishedAt:"2023-05-07T04:47:55.468Z",title:"Getting started with React Router: Basics and Configuration",slug:"getting-started-with-react-router-basics-and-configuration",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React"],readTime:"4",metaDesc:"If you're developing a web application with React, you may have found that navigating between different pages and URLs can be a challenge. Fortunately, React Router is a powerful and easy-to-use tool that can help you manage this process. In this article, we'll go over the basics of React Router and how to configure it in your project.\n\n"},{id:23,createdAt:"2023-05-07T02:54:51.762Z",updatedAt:"2023-05-07T04:48:29.654Z",publishedAt:"2023-05-07T04:48:29.653Z",title:"How to Pass Parameters with React Router",slug:"how-to-pass-parameters-with-react-router",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React"],readTime:"4",metaDesc:"If you're building a single-page application with React, chances are that you're using React Router to handle your app's routing. React Router is a powerful library that allows you to create dynamic routes for your app. One of the most common use cases for React Router is passing parameters to a component.\n\nPassing parameters with React Router is a simple process, but it can be tricky for beginners. In this tutorial, we'll walk you through the steps of passing parameters with React Router, and we'll show you some examples to help you get started."},{id:24,createdAt:"2023-05-07T04:35:51.621Z",updatedAt:"2023-05-07T04:49:04.196Z",publishedAt:"2023-05-07T04:49:04.194Z",title:"Using React Router History Object for Navigation",slug:"using-react-router-history-object-for-navigation",img:"https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",tags:["React"],readTime:"5",metaDesc:"React Router is a popular routing library for building single-page web applications in React. It provides a declarative way to define routes and navigate between them. One of the core features of React Router is the history object, which enables you to manipulate the browser's history and control navigation programmatically."}],f=e=>{let{content:t,title:a,metaDesc:o,tags:n,slug:p,readTime:f,img:b,author:y}=e;(0,u.useEffect)(()=>(A(),Z(),()=>{}),[]);let[x,R]=(0,u.useState)([]),[T,j]=(0,u.useState)([]);function v(e){return e[Math.floor(Math.random()*e.length)]}let A=()=>{let e=[];for(;e.length<5;){let t=v(w);e.includes(t)||e.push(t)}R(t=>[...t,e])},Z=()=>{let e=[];for(;e.length<5;){let t=v(w);e.includes(t)||e.push(t)}j(e)};return(0,s.jsxs)(c.Z,{data:e,children:[(0,s.jsxs)(l(),{children:[(0,s.jsx)("title",{children:a}),(0,s.jsx)("meta",{name:"description",content:o}),(0,s.jsx)("meta",{property:"og:url",content:"https://www.codewithgolu.com/reactjs/".concat(p,"/")}),(0,s.jsx)("meta",{property:"og:type",content:"website"}),(0,s.jsx)("meta",{property:"og:title",content:a}),(0,s.jsx)("meta",{property:"og:description",content:o}),(0,s.jsx)("meta",{property:"og:image",content:b}),(0,s.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,s.jsx)("meta",{property:"twitter:domain",content:"codewithgolu.com"}),(0,s.jsx)("meta",{property:"twitter:url",content:"https://www.codewithgolu.com/reactjs/".concat(p,"/")}),(0,s.jsx)("meta",{name:"twitter:title",content:a}),(0,s.jsx)("meta",{name:"twitter:description",content:o}),(0,s.jsx)("meta",{name:"twitter:image",content:b})]}),(0,s.jsx)("div",{className:"container",style:{marginTop:120},children:(0,s.jsxs)("div",{className:"card feature-card",children:[(0,s.jsx)("figure",{className:"card-banner img-holder",style:{"--width":1602,"--height":903},children:(0,s.jsx)(i(),{src:b,width:"1602",height:"903",loading:"lazy",alt:a,className:"img-cover"})}),(0,s.jsxs)("div",{style:{flexDirection:"row",display:"flex",gap:5},children:[(0,s.jsx)(m.Dk,{url:"https://www.codewithgolu.com/reactjs/".concat(p,"/"),children:(0,s.jsx)(m.Vq,{size:32,round:!0})}),(0,s.jsx)(m.MC,{url:"https://www.codewithgolu.com/reactjs/".concat(p,"/"),children:(0,s.jsx)(m.cH,{size:32,round:!0})}),(0,s.jsx)(m.iR,{url:"https://www.codewithgolu.com/reactjs/".concat(p,"/"),children:(0,s.jsx)(m.MP,{size:32,round:!0})}),(0,s.jsx)(m.N0,{url:"https://www.codewithgolu.com/reactjs/".concat(p,"/"),children:(0,s.jsx)(m.ud,{size:32,round:!0})}),(0,s.jsx)(m.r2,{url:"https://www.codewithgolu.com/reactjs/".concat(p,"/"),children:(0,s.jsx)(m.pA,{size:32,round:!0})}),(0,s.jsx)(m.tq,{url:"https://www.codewithgolu.com/reactjs/".concat(p,"/"),children:(0,s.jsx)(m.YG,{size:32,round:!0})}),(0,s.jsx)(m.B,{url:"https://www.codewithgolu.com/reactjs/".concat(p,"/"),children:(0,s.jsx)(m.Zm,{size:32,round:!0})})]}),(0,s.jsxs)("div",{className:"card-content",children:[(0,s.jsxs)("div",{className:"card-wrapper",children:[(0,s.jsx)("div",{className:"card-tag",children:n.map((e,t)=>(0,s.jsxs)(r(),{href:"#",className:"span hover-2",children:["#",e]},t))}),(0,s.jsxs)("div",{className:"wrapper",children:[(0,s.jsx)("ion-icon",{name:"time-outline","aria-hidden":"true"}),(0,s.jsxs)("span",{className:"span",children:[f," mins read"]})]})]}),(0,s.jsx)("div",{className:"card-wrapper",children:(0,s.jsx)("div",{className:"profile-card",children:(0,s.jsx)("div",{children:(0,s.jsxs)("p",{className:"card-title",children:["By:"," ",y.data.attributes.username]})})})}),(0,s.jsx)("h1",{className:"headline headline-3",style:{fontSize:30},children:a}),(0,s.jsx)("div",{className:"content",style:{marginTop:30,wordSpacing:3,fontSize:18,fontWeight:"normal"},children:(0,s.jsx)(g.R,{...t,components:i()})})]})]})}),(0,s.jsx)(h.Z,{randomPosts:x,popularPosts:T,cat:"reactjs"}),(0,s.jsx)(d.Z,{})]})};var b=!0,y=f}},function(e){e.O(0,[247,338,71,774,888,179],function(){return e(e.s=3055)}),_N_E=e.O()}]);